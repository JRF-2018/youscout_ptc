'== BEGIN YOUSCOUT ==
CLEAR: ACLS: PNLTYPE "OFF": KEY 1,"LIST ": KEY 2,"ERL"+CHR$(13)
YOUSCOUT_VER$ = "0.06" 'Time-stamp: <2013-04-13T06:32:31Z>
YOUSCOUT_URI$ = "http://jrf.cocolog-nifty.com/archive/youscout/ptc/youscout.prg"

GOSUB @STACKLIB_INIT
GOSUB @STDLIB_INIT
GOSUB @CTRLLIB_INIT
GOSUB @TRTCONST_INIT
GOSUB @YSCCONST_INIT
GOSUB "@" + TAROT_BASE$ + "_P_INIT"
GOSUB @YSCMSG_INIT
'REQUIRE "STACKLIB"
'REQUIRE "STDLIB"
'REQUIRE "CTRLLIB"
'REQUIRE "TRTCONST"
'REQUIRE "YSCCONST"
'REQUIRE "@" + TAROT_BASE$ + "_P"
'REQUIRE "YSCMSG"

DEBUG = 1
KEY 3, "FOR A=0 TO FSP:?FSTACK$[A]:NEXT" + CHR$(13)

'The F3-key shows function stack trace.
'You need using @ENTER @LEAVE to show it.

'F3 キー ハ カンスウ スタック トレース ヒョウジ。
'ソノタメ ニハ @ENTER @LEAVE ガ ヒツヨウ。

MODE$="@MODE_TITLE"

ST_LANG$ = DEF_LANG$
ST_TERMINALS = DEF_TERMINALS
ST_COURT_CD$ = DEF_COURT_CD$
ST_MA_INF = DEF_MA_INF
ST_SWAP_8_11$ = DEF_SWAP_8_11$
ST_UREV = DEF_UREV

'MODEL
CUR_PURPOSE$ = ""
CUR_PURPOSE_DEG = 0 '90: whirl, 270: eclipse
DIM CUR_BOARD$[6]
CUR_TALON$ = ""
CUR_DISCARDED$ = ""
CUR_DRAWN$ = ""
CUR_TOKEN = 0
DIM CUR_CARDS$[8]
'CARDS[0]: cups_1 .. CARDS[5]: coins_6,
'CARDS[6]: coins_lower, CARDS[7]: swords_upper
CUR_TERMINALS = 0

NEXT_DISCARDED$ = ""
NEXT_TOKEN = 0
DIM NEXT_CARDS$[8]

'for Reduction.
CUR_SUITABLE$ = "" '"NONE", "IGNORED", "": Unknown, or the min suitable card. 
CUR_EXP_L$ = "": CUR_EXP_R$ = ""
DIM CARD$[22 + 14 * 4] 'TEMP VAR

'for Animation.
DIM CUR_SPG$[8]
DIM PREV_FST_CD$[9]

CUR_SRC_LEN = 3 'Max number of changing list of rules.
CUR_SRC_N = 0
DIM CUR_SRC$[CUR_SRC_LEN], CUR_DEST$[CUR_SRC_LEN]
DIM CUR_SRC_CDS$[CUR_SRC_LEN], CUR_SRC_SPG$[CUR_SRC_LEN]
DIM CUR_SRC_POS[CUR_SRC_LEN], CUR_DEST_POS[CUR_SRC_LEN]

'for Soroban.
CUR_SOROBAN_L = 0: CUR_SOROBAN_R = 0
CUR_SCORE_L = -1: CUR_SCORE_R = -1

'for Main Panel.
MAIN_PNL_SEL = -1

'for SPRITE.
SPRITE_LEN = 100
SPRITE_N = 32
DIM SPRITE$[SPRITE_LEN]
SPRITE_ALLOC_MIN = 32


@MAIN
  R$ = "@MAIN": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R

@_LOAD_MEM
  IF MEM$ != "" AND INSTR(0, MEM$, "youscout,") == 0 THEN @_LOAD_MEM_1
  PRINT "Load settings..."
  PRINT "セッテイ ファイル ヲ ヨミコミマス..."
  LOAD SAVE_FILE$, FALSE
  IF RESULT == TRUE THEN @_LOAD_MEM_1
  PRINT "Create a new file to save settings."
  PRINT "セッテイ ホゾン ヨウ ファイル ヲ ツクリマス。"
  WAIT 10
  MEM$ = "youscout,1"
  SAVE SAVE_FILE$
  IF RESULT != TRUE THEN MEM$ = ""
@_LOAD_MEM_1

  PRINT "Initializing..."
  PRINT "ショキカ チュウ..."

  R = -1: GOSUB @PUSH_R
  R$ = "GRP": GOSUB @PUSH_RS
  R$ = "@" + TAROT_NAME$ + "_CMAP": GOSUB @PUSH_RS
  GOSUB @READ_CMAP
  CMAP$[COL_BOARD] = BOARD_RGB$
  GOSUB @GPAGE_U
  COLSET "GRP", COL_BOARD, BOARD_RGB$
  GOSUB @GPAGE_L
  COLSET "GRP", COL_BOARD, BOARD_RGB$
  FOR I = 1 TO 16 - 1
    GOSUB @GPAGE_U
    GOSUB @BGPAGE_U
    GOSUB @SPPAGE_U
    COLSET "BG", I, CMAP$[I]
    COLSET "SP", I, CMAP$[I]
    IF (I > 0 AND I <= 7) OR I == 14 THEN COLSET "BG", I * 16 + 15, CMAP$[I]
    GOSUB @GPAGE_L
    GOSUB @BGPAGE_L
    GOSUB @SPPAGE_L
    COLSET "BG", I, CMAP$[I]
'    COLSET "SP", I, CMAP$[I]
    IF (I > 0 AND I <= 7) OR I == 14 THEN COLSET "BG", I * 16 + 15, CMAP$[I]
  NEXT

  SYSBEEP = FALSE
  GOSUB @BGPAGE_U
  A$ = CHR_FILE_B$
  LOAD "BGU1:" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR_FST
  GOSUB @BGPAGE_L
  LOAD "BGU1:" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR_FST
  GOSUB @SPPAGE_U
  A$ = CHR_FILE_S7$
  LOAD "SPU7:" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR_FST
  A$ = CHR_FILE_S6$
  LOAD "SPU6:" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR_FST
  A$ = CHR_FILE_S5$
  LOAD "SPU5:" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR_FST
  A$ = CHR_FILE_S4$
  LOAD "SPU4:" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR_FST

  GOSUB @LOAD_MISC
  GOSUB @REFRESH_SETTING

  PRINT "INIT OK"

@_MAIN_LOOP
  A$ = MODE$
  R$ = ""
  A = INSTR(MODE$, ",")
  IF A != -1 THEN A$ = MID$(MODE$, 0, A): R$ = MID$(MODE$, A + 1, LEN(MODE$) - A - 1)
  IF MID$(MODE$, 0, 4) != "TEST" THEN R$ = R$: GOSUB @PUSH_RS
  GOSUB A$
  VSYNC 1
  IF MODE$ != "@END" GOTO @_MAIN_LOOP

  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  END


@LOAD_ERROR
  PRINT A$ + ": LOAD Error!"
  STOP: RETURN

@LOAD_ERROR_FST
  PRINT A$ + ": LOAD Error!"
  PRINT ""
  PRINT "You need execute MK" + TAROT_BASE$ + " before, ";
  PRINT "in order to generate necessary files for this program.  ";
  PRINT "MK" + TAROT_BASE$ + " had to be distributed with YOUSCOUT."
  PRINT "ヒツヨウ ナ ファイル ヲ ツクル タメ MK" + TAROT_BASE$ + " ヲ ジッコウ シテクダサイ。";
  PRINT "MK" + TAROT_BASE$ + " ハ YOUSCOUT ト トモ ニ ハイフ サレテタ ハズデス。"
  STOP: RETURN


@REFRESH_SETTING '(NONE): NONE
  R$ = "@REFRESH_SETTING": ARGNUM = 0: GOSUB @ENTER

  IF MEM$ == "" THEN @_REFRESH_SET_1
  R$ = MEM$: GOSUB @PUSH_RS
  GOSUB @POP_RA

  ST_LANG$ = DEF_LANG$
  ST_TERMINALS = DEF_TERMINALS
  ST_COURT_CD$ = DEF_COURT_CD$
  ST_MA_INF = DEF_MA_INF
  ST_SWAP_8_11$ = DEF_SWAP_8_11$
  ST_UREV = DEF_UREV

  R$ = "lang": GOSUB @PUSH_RS
  GOSUB @GET_RA
  IF RT$ != "NONE" THEN ST_LANG$ = R$
  IF RT$!="NONE" AND R$==DEF_LANG$ THEN R$="lang":GOSUB @PUSH_RS:GOSUB @DELETE_RA

  R$ = "terminals": GOSUB @PUSH_RS
  GOSUB @GET_RA
  IF RT$ != "NONE" THEN ST_TERMINALS = VAL(R$)
  IF RT$!="NONE" AND VAL(R$)==DEF_TERMINALS THEN R$="terminals":GOSUB @PUSH_RS:GOSUB @DELETE_RA

  R$ = "court_cd": GOSUB @PUSH_RS
  GOSUB @GET_RA
  IF RT$ != "NONE" THEN ST_COURT_CD$ = R$
  IF RT$!="NONE" AND R$==DEF_COURT_CD$ THEN R$= "court_cd":GOSUB @PUSH_RS:GOSUB @DELETE_RA

  R$ = "ma_inf": GOSUB @PUSH_RS
  GOSUB @GET_RA
  IF RT$ != "NONE" THEN ST_MA_INF = VAL(R$)
  IF RT$!="NONE" AND VAL(R$)==DEF_MA_INF THEN R$="ma_inf":GOSUB @PUSH_RS:GOSUB @DELETE_RA

  R$ = "swap_8_11": GOSUB @PUSH_RS
  GOSUB @GET_RA
  IF RT$ != "NONE" THEN ST_SWAP_8_11$ = R$
  IF RT$!="NONE" AND R$==DEF_SWAP_8_11$ THEN R$="swap_8_11":GOSUB @PUSH_RS:GOSUB @DELETE_RA

  R$ = "urev": GOSUB @PUSH_RS
  GOSUB @GET_RA
  IF RT$ != "NONE" THEN ST_UREV = VAL(R$)
  IF RT$!="NONE" AND VAL(R$)==DEF_UREV THEN R$="urev":GOSUB @PUSH_RS:GOSUB @DELETE_RA

  GOSUB @PUSH_RA
  GOSUB @POP_RS
  MEM$ = R$

@_REFRESH_SET_1
  R$ = ST_LANG$: GOSUB @PUSH_RS
  GOSUB @LOAD_MSG_BASIC
  R$ = ST_LANG$: GOSUB @PUSH_RS
  GOSUB @LOAD_MSG_YSCWDS

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@MODE_TITLE '(DUMMY$:STRING): NONE
  R$ = "@MODE_TITLE": ARGNUM  = 1: GOSUB @ENTER

  R = I: GOSUB @PUSH_R

  CLIP_CX[0] = 0
  CLIP_CY[0] = 0
  CLIP_CW[0] = CON_WIDTH
  CLIP_CH[0] = CON_HEIGHT
  CLIP_CX[1] = 0
  CLIP_CY[1] = 0
  CLIP_CW[1] = CON_WIDTH
  CLIP_CH[1] = CON_HEIGHT
  R = 0: GOSUB @PUSH_R
  GOSUB @CON_CLS
  R = 1: GOSUB @PUSH_R
  GOSUB @CON_CLS

  GOSUB @GPAGE_U
  GCLS COL_BOARD
  GOSUB @BGPAGE_U
  BGCLR
  GOSUB @GPAGE_L
  GCLS COL_BOARD
  GOSUB @BGPAGE_L
  BGCLR
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE
  GCLS 0
  G_PAGE = 0: GPAGE 0, R_GPAGE, U_GPAGE
  GCLS 0
  GOSUB @SPPAGE_U
  FOR I = 1 TO 15
    SPRITE$[I] = ""
    SPCLR I
  NEXT
  FOR I = 32 TO 99
    SPRITE$[I] = ""
    SPCLR I
  NEXT
  GOSUB @RELOAD_SPRITE
  GOSUB @SPPAGE_L
  SPOFS SP_CURSOR, -1024, -1024

  FOR I = 0 TO CUR_SRC_LEN - 1
    CUR_SRC_SPG$[I] = ""
  NEXT
  FOR I = 0 TO 8 - 1
    CUR_SPG$[I] = ""
  NEXT

  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE
  GOSUB @DRAW_LOGO
  GOSUB @SHIPOUT_U_GPAGE

  RESTORE "@MSG_MAINMNU_" + ST_LANG$
  RA$[0, 0] = "\B[B]"
  RA$[0, 1] = ""
  RA$[1, 0] = "\B[START]"
  RA$[1, 1] = "@MODE_START"
  RN = 2
@_MODE_TITLE_1  
  READ A$, R$
  IF A$ == "" THEN @_MODE_TITLE_2
  RA$[RN, 0] = A$
  RA$[RN, 1] = R$
  RN = RN + 1
  GOTO @_MODE_TITLE_1
@_MODE_TITLE_2
  R = -1: GOSUB @PUSH_R
  R = -1: GOSUB @PUSH_R
  GOSUB @POPUP_MNU_RA
  MODE$ = R$

  GOSUB @POP_R: I = R

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MODE_SET_LANG '(LANG$:STRING): NONE
  R$ = "@MODE_SET_LANG": ARGNUM  = 1: GOSUB @ENTER

  R$ = LANG$: GOSUB @PUSH_RS

  LANG$ = STACK$[BP + 1]

  R$ = MEM$: GOSUB @PUSH_RS
  R$ = "lang": GOSUB @PUSH_RS
  R$ = LANG$: GOSUB @PUSH_RS
  GOSUB @SET_SA
  MEM$ = R$

  GOSUB @REFRESH_SETTING
  MODE$ = "@MODE_TITLE"

  GOSUB @POP_RS: LANG$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MODE_OPT '(DUMMY$:STRING): NONE
  R$ = "@MODE_OPT": ARGNUM = 1: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R$ = L$: GOSUB @PUSH_RS
  R$ = N$: GOSUB @PUSH_RS
  R$ = V$: GOSUB @PUSH_RS
  R = N: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1

  CLIP_CX[1] = 2
  CLIP_CY[1] = 2
  CLIP_CW[1] = CON_WIDTH - 4
  CLIP_CH[1] = CON_HEIGHT - 4
  R = 1: GOSUB @PUSH_R
  R = 1: GOSUB @PUSH_R
  R = CLIP_CX[1] - 1: GOSUB @PUSH_R
  R = CLIP_CY[1] - 1: GOSUB @PUSH_R
  R = CLIP_CW[1] + 2: GOSUB @PUSH_R
  R = CLIP_CH[1] + 2: GOSUB @PUSH_R
  GOSUB @DRAW_CWIN

  GOSUB @MNU_CTRL_NEW
  R$ = "B": GOSUB @PUSH_RS
  R$ = "@CANCEL": GOSUB @PUSH_RS
  GOSUB @MNU_CTRL_BUTTON

  RESTORE "@MSG_OPTMNU_" + ST_LANG$
  N = 0
@_MSG_OPT_1
  READ A$, R$
  IF A$ == "" THEN @_MSG_OPT_2
  R = 1: GOSUB @ADD_STACK
  STACK$[RBP + N] = R$
  R = 1: GOSUB @PUSH_R
  R = CLIP_CX[1]: GOSUB @PUSH_R
  R = CLIP_CY[1] + N * 3: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  R = CLIP_CX[1]: GOSUB @PUSH_R
  R = CLIP_CY[1] + N * 3: GOSUB @PUSH_R
  R = CLIP_CW[1]: GOSUB @PUSH_R
  R = 2: GOSUB @PUSH_R
  R$ = STACK$[RBP + N]: GOSUB @PUSH_RS
  GOSUB @MNU_CTRL_ADD

  N = N + 1
  GOTO @_MSG_OPT_1
@_MSG_OPT_2

  I = CLIP_CX[1] + 1
  R = 1: GOSUB @PUSH_R
  R = I: GOSUB @PUSH_R
  R = CLIP_CY[1] + N * 3: GOSUB @PUSH_R
  R$ = "[" + MSG_SET$ + "]": GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  R = I: GOSUB @PUSH_R
  R = CLIP_CY[1] + N * 3: GOSUB @PUSH_R
  R = LAST_CX[1] - I: GOSUB @PUSH_R
  R = 1: GOSUB @PUSH_R
  R$ = "@SET": GOSUB @PUSH_RS
  I = LAST_CX[1] + 1
  GOSUB @MNU_CTRL_ADD

  R = 1: GOSUB @PUSH_R
  R = I: GOSUB @PUSH_R
  R = CLIP_CY[1] + N * 3: GOSUB @PUSH_R
  R$ = "[" + MSG_DEFAULT$ + "]": GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  R = I: GOSUB @PUSH_R
  R = CLIP_CY[1] + N * 3: GOSUB @PUSH_R
  R = LAST_CX[1] - I: GOSUB @PUSH_R
  R = 1: GOSUB @PUSH_R
  R$ = "@DEFAULT": GOSUB @PUSH_RS
  I = LAST_CX[1] + 1
  GOSUB @MNU_CTRL_ADD

  R = 1: GOSUB @PUSH_R
  R = I: GOSUB @PUSH_R
  R = CLIP_CY[1] + N * 3: GOSUB @PUSH_R
  R$ = "[\N[B]" + MSG_CANCEL$ + "]": GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  R = I: GOSUB @PUSH_R
  R = CLIP_CY[1] + N * 3: GOSUB @PUSH_R
  A = LAST_CX[1] - I
  R = LAST_CX[1] - I: GOSUB @PUSH_R
  R = 1: GOSUB @PUSH_R
  R$ = "@CANCEL": GOSUB @PUSH_RS
  GOSUB @MNU_CTRL_ADD

  S$ = MEM$
@_MODE_OPT_LP
  I = 0
@_MODE_OPT_3
  IF I >= N THEN @_MODE_OPT_3E
  R$ = STACK$[RBP + I]: GOSUB @PUSH_RS
  GOSUB @POP_RR
  L$ = RR$[0]
  N$ = RR$[1]
  R$ = S$: GOSUB @PUSH_RS
  R$ = N$: GOSUB @PUSH_RS
  GOSUB @GET_SA
  IF RT$ != "NONE" THEN @_MODE_OPT_4
  R$ = DEF_SA$: GOSUB @PUSH_RS
  R$ = N$: GOSUB @PUSH_RS
  GOSUB @GET_SA
@_MODE_OPT_4
  V$ = R$
  RESTORE L$
  RN = 0
@_MODE_OPT_5
  READ A$, R$
  IF A$ == "" THEN @_MODE_OPT_5E
  RA$[RN, 0] = A$
  RA$[RN, 1] = R$
  RN = RN + 1
  GOTO @_MODE_OPT_5
@_MODE_OPT_5E
  R$ = V$: GOSUB @PUSH_RS
  GOSUB @GET_RA
  V$ = R$
  R = 1: GOSUB @PUSH_R
  R = CLIP_CX[1] + 1: GOSUB @PUSH_R
  R = CLIP_CY[1] + I * 3 + 1: GOSUB @PUSH_R
  R$ = "\c4" + V$ + " " * (CLIP_CW[1] - LEN(V$) - 1): GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  I = I + 1
  GOTO @_MODE_OPT_3
@_MODE_OPT_3E

  GOSUB @MNU_CTRL_LOOP

  IF R$ == "@CANCEL" THEN @_MODE_OPT_LPC
  IF R$ == "@SET" THEN MEM$ = S$: GOTO @_MODE_OPT_LPS
  IF R$ == "@DEFAULT" THEN S$ = DEF_SA$: GOTO @_MODE_OPT_LP
  R$ = R$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  L$ = RR$[0]
  N$ = RR$[1]
  RESTORE L$
  RN = 0
@_MODE_OPT_6
  READ A$, R$
  IF A$ == "" THEN @_MODE_OPT_6E
  RA$[RN, 0] = R$
  RA$[RN, 1] = A$
  RN = RN + 1
  GOTO @_MODE_OPT_6
@_MODE_OPT_6E
  R = -1: GOSUB @PUSH_R
  R = -1: GOSUB @PUSH_R
  GOSUB @POPUP_MNU_RA
  IF RT$ == "NONE" THEN @_MODE_OPT_LP
  V$ = R$
  R$ = S$: GOSUB @PUSH_RS
  R$ = N$: GOSUB @PUSH_RS
  R$ = V$: GOSUB @PUSH_RS
  GOSUB @SET_SA
  S$ = R$
  GOTO @_MODE_OPT_LP

@_MODE_OPT_LPS
  MEM$ = S$
  SAVE SAVE_FILE$
  GOSUB @REFRESH_SETTING
@_MODE_OPT_LPC

  MODE$ = "@MODE_TITLE"

  R = N: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: N = R
  GOSUB @POP_RS: V$ = R$
  GOSUB @POP_RS: N$ = R$
  GOSUB @POP_RS: L$ = R$
  GOSUB @POP_RS: S$ = R$
  GOSUB @POP_R: I = R

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MODE_HELP '(DUMMY$:STRING): NONE
  R$ = "@MODE_HELP": ARGNUM = 1: GOSUB @ENTER

  RA$[0, 0] = "hlp_back"
  RA$[0, 1] = PRGNAME$
  RA$[1, 0] = "hlp_start"
  RA$[1, 1] = "@HLP_START_" + ST_LANG$
  RA$[2, 0] = "hlp_lang"
  RA$[2, 1] = ST_LANG$
  RA$[3, 0] = "ysc_ver"
  RA$[3, 1] = YOUSCOUT_VER$
  RN = 4
  GOSUB @PUSH_RA
  GOSUB @POP_RS
  MEM$ = R$
  EXEC YSCHELP_PRG$
  IF RESULT == TRUE THEN @_MODE_HELP_UR
  PRINT YSCHELP_PRG$ + ": EXEC Error!"
  PRINT ""
  PRINT "You need PRG:" + YSCHELP_PRG$ + ". ";
  PRINT YSCHELP_PRG$ + " had to be distributed with YOUSCOUT."
  PRINT "PRG:" + YSCHELP_PRG$ + "ガ ヒツヨウ デス。";
  PRINT YSCHELP_PRG$ + " ハ YOUSCOUT ト トモ ニ ハイフ サレテタ ハズデス。"
  STOP: RETURN

@_MODE_HELP_UR
  PRINT "Unreacheable code!"
  STOP: RETURN

  MODE$ = "@MODE_TITLE"
  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MODE_START '(DUMMY$:STRING): NONE
  R$ = "@MODE_START": ARGNUM = 1: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = NEED_SWAP: GOSUB @PUSH_R

  NEED_SWAP = 0

  GOSUB @SPPAGE_U
  GOSUB @BGPAGE_L

  BGMSET BGM_BEEP, SND_CD_SHUFFLE$
  BGMPLAY BGM_BEEP

  CUR_PURPOSE$ = ""
  CUR_PURPOSE_DEG = 0
  CUR_TALON$ = ""
  CUR_DISCARDED$ = ""
  CUR_DRAWN$ = ""
  CUR_TOKEN = 0
  CUR_TERMINALS = 0
  NEXT_DISCARDED$ = ""
  NEXT_TOKEN = 0
  FOR I = 0 TO 8 - 1
   CUR_CARDS$[I] = ""
   NEXT_CARDS$[I] = ""
   CUR_SPG$[I] = ""
   PREV_FST_CD$[I] = ""
  NEXT
  PREV_FST_CD$[8] = ""
  CUR_SOROBAN_L = 0
  CUR_SOROBAN_R = 0

  R$ = "A01,A02,A03,A04,A05,A06,A07,A08,A09,A10,"
  R$ = R$ + "A11,A12,A14,A15,A16,A17,A18,A19,A20,A21": GOSUB @PUSH_RS
  GOSUB @SHUFFLE_CARDS
  R$ = R$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  A = 0
  R = 0
  FOR I = 0 TO 6 - 1
    IF RND(2) THEN A$ = "U" ELSE A$ = "R"
    CUR_BOARD$[I] = RR$[I] + A$
    IF VAL(MID$(RR$[I], 1, 2)) % 2 == 1 THEN A = A + 1
    IF RR$[I] == "A08" THEN R = R + 1 * (2 + (A$ == "U"))
    IF RR$[I] == "A11" THEN R = R + 4 * (2 + (A$ == "U"))
  NEXT
  IF (R AND 10) == 0 THEN @_MODE_START_S
  IF ST_SWAP_8_11$ == "memorial" THEN NEED_SWAP = 1: GOTO @_MODE_START_S
  IF ST_SWAP_8_11$ == "solid" AND 2 <= A AND A <= 4 THEN NEED_SWAP = 1: GOTO @_MODE_START_S
  IF ST_SWAP_8_11$ != "expansive" THEN @_MODE_START_S
  IF (R AND 10) == 10 THEN NEED_SWAP = 1: GOTO @_MODE_START_S
  IF A > 3 AND (R AND 2) != 0 THEN NEED_SWAP = 1: GOTO @_MODE_START_S
  IF A == 3 AND (R AND 2) != 0 AND (R AND 1) != 0 THEN NEED_SWAP = 1: GOTO @_MODE_START_S
  IF A < 3 AND (R AND 8) != 0 THEN NEED_SWAP = 1: GOTO @_MODE_START_S
  IF A == 3 AND (R AND 8) != 0 AND (R AND 4) != 0 THEN NEED_SWAP = 1: GOTO @_MODE_START_S
@_MODE_START_S
  IF ST_SWAP_8_11$ != "solid" THEN @_MODE_START_SE
  R = 0
  FOR I = 0 TO 6 - 1
    A = VAL(MID$(CUR_BOARD$[I], 1, 2))
    IF NEED_SWAP AND (A == 8 OR A == 11) THEN A = 11 * (A == 8) + 8 * (A == 11)
    A$ = MID$(CUR_BOARD$[I], 3, 1)
    IF (A % 2) == 1 THEN R = R + 1
    IF A$ == "U" THEN R = R + 16
    IF A$ == "U" AND (A % 2) == 1 THEN R = R + 256
    IF A$ == "R" AND (A % 2) == 0 THEN R = R + 256
  NEXT
  A = R % 16
  IF A != 3 THEN @_MODE_START_SE
  A = FLOOR((R % 256) / 16)
  IF A == 0 THEN CUR_PURPOSE_DEG = 90: CUR_PURPOSE$ = "A13": GOTO @_MODE_START_SE
  IF A == 6 THEN CUR_PURPOSE_DEG = 90: CUR_PURPOSE$ = "A00": GOTO @_MODE_START_SE
  A = FLOOR(R / 256)
  IF A == 0 THEN CUR_PURPOSE_DEG = 270: CUR_PURPOSE$ = "A13": GOTO @_MODE_START_SE
  IF A == 6 THEN CUR_PURPOSE_DEG = 270: CUR_PURPOSE$ = "A00": GOTO @_MODE_START_SE
@_MODE_START_SE

  GOSUB @SWITCH_L_GPAGE
  GCLS COL_BOARD
  GOSUB @DRAW_MAIN_PNL
  GOSUB @SHIPOUT_L_GPAGE
  GOSUB @DRAW_SRBN_TAMA

  CLIP_CX[1] = GAME_CON_CX
  CLIP_CY[1] = 0
  CLIP_CW[1] = GAME_CON_CW
  CLIP_CH[1] = CON_HEIGHT

  GOSUB @MAIN_PNL_NEW

  R = 0: GOSUB @PUSH_R
  GOSUB @CON_CLS
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE
  GCLS COL_BOARD
  GOSUB @SHIPOUT_U_GPAGE

  GOSUB @LOAD_BOARD

  GOSUB @GAME_CON_CLS
  R$ = "@MSG_START_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

@_MODE_START_BW
  VSYNC 1
  IF BGMCHK() THEN @_MODE_START_BW

  BGMSET BGM_BEEP, SND_CD$
  I = 0
@_MODE_START_1
  IF I >= 6 THEN @_MODE_START_1E
  A = SP_TMP_OFFSET + I
  SPSET A, 7 * 64 + SPU7_B00 / 4, SPPL_B00, 0, 0, 2, 64, 64
  SPHOME A, CARD_HW, CARD_HH
  IF ST_UREV THEN SPANGLE A, 180
  IF ST_UREV THEN R = GRP_HEIGHT + CARD_HH + 1 ELSE R = GRP_HEIGHT
  SPOFS A, MISSING_X, R
  X = CARD_X[I] + CARD_HW
  Y = CARD_Y[I] + CARD_HH
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS A, X, Y, DRAW_CD_TM_U
  R = DRAW_CD_TM_U: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_START_AE
  BGMPLAY BGM_BEEP
  I = I + 1
  GOTO @_MODE_START_1
@_MODE_START_1E
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE
  GCLS COL_BOARD
  GOSUB @DRAW_BOARD
  GOSUB @SHIPOUT_U_GPAGE

  I = 0
@_MODE_START_2
  IF I >= 6 THEN @_MODE_START_2E
  IF ST_UREV THEN R = ANIM_B00_ANGLE_R ELSE R = ANIM_B00_ANGLE
  SPANGLE SP_TMP_OFFSET + I, R, DRAW_CD_TM_A
  R = DRAW_CD_TM_A: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_START_AE
  SPOFS SP_TMP_OFFSET + I, -1024, -1024
  BGMPLAY BGM_BEEP
  I = I + 1
  GOTO @_MODE_START_2
@_MODE_START_2E

  GOSUB @GAME_CON_CLS
  A$ = "@MSG_SWAPMEM_" + ST_LANG$
  IF ST_SWAP_8_11$ == "expansive" THEN A$ = "@MSG_SWAPEXP_" + ST_LANG$
  IF ST_SWAP_8_11$ == "solid" THEN A$ = "@MSG_SWAPSOL_" + ST_LANG$
  R$ = A$: GOSUB @PUSH_RS
  RESTORE "@MSG_SWAPNO_" + ST_LANG$
  READ A$
  IF NEED_SWAP THEN  A$ = "\0" ELSE A$ = "→" + A$
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  IF NEED_SWAP THEN @_MODE_START_3
  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_START_AE
  GOTO @_MODE_START_AE

@_MODE_START_3
  FOR I = 0 TO 6 - 1
    A$ = MID$(CUR_BOARD$[I], 0, 3)
    IF A$ != "A08" AND A$ != "A11" THEN @_MODE_START_31
    A = SP_TMP_OFFSET + I
    X = CARD_X[I] + CARD_HW
    Y = CARD_Y[I] + CARD_HH
    IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
    SPOFS A, X, Y
    SPANGLE A, ST_UREV * 180, DRAW_CD_TM_A, -1
@_MODE_START_31
  NEXT
  R = DRAW_CD_TM_A: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_START_AE
  BGMPLAY BGM_BEEP

  G_PAGE = 0: GPAGE 0, R_GPAGE, U_GPAGE
  FOR I = 0 TO 6 - 1
    A$ = MID$(CUR_BOARD$[I], 0, 3)
    IF A$ != "A08" AND A$ != "A11" THEN @_MODE_START_32
    IF A$ == "A08" THEN A = GRP_R_I11 ELSE A = GRP_R_I8
    X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    Y = (A % GRP_ROWS) * CARD_HEIGHT
    A = FLOOR(I / GRP_ROWS) * CARD_WIDTH
    R = (I % GRP_ROWS) * CARD_HEIGHT
    GCOPY R_GPAGE, X, Y, X + CARD_WIDTH - 1, Y + CARD_HEIGHT - 1, A, R, 1
@_MODE_START_32
  NEXT
  FOR I = 0 TO 6 - 1
    A$ = CUR_BOARD$[I]
    IF MID$(A$, 0, 3) == "A08" THEN CUR_BOARD$[I] = "A11" + MID$(A$, 3, 1)
    IF MID$(A$, 0, 3) == "A11" THEN CUR_BOARD$[I] = "A08" + MID$(A$, 3, 1)
  NEXT
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE
  GCLS COL_BOARD
  GOSUB @DRAW_BOARD
  GOSUB @SHIPOUT_U_GPAGE
  NEED_SWAP = 0

  FOR I = 0 TO 6 - 1
    A$ = MID$(CUR_BOARD$[I], 0, 3)
    IF A$ != "A08" AND A$ != "A11" THEN @_MODE_START_33
    IF ST_UREV THEN A = ANIM_B00_ANGLE_R ELSE A = ANIM_B00_ANGLE
    SPANGLE SP_TMP_OFFSET + I, A, DRAW_CD_TM_A
@_MODE_START_33
  NEXT
  R = DRAW_CD_TM_A: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_START_AE
  BGMPLAY BGM_BEEP

@_MODE_START_AE
  IF R$ == "RESET" THEN MODE$ = "@MODE_TITLE": GOTO @_MODE_START_E
  FOR I = 0 TO 6 - 1
    SPCLR SP_TMP_OFFSET + I
  NEXT
  IF ! NEED_SWAP THEN @_MODE_START_E1
  G_PAGE = 0: GPAGE 0, R_GPAGE, U_GPAGE
  FOR I = 0 TO 6 - 1
    A$ = MID$(CUR_BOARD$[I], 0, 3)
    IF A$ != "A08" AND A$ != "A11" THEN @_MODE_START_E2
    IF A$ == "A08" THEN A = GRP_R_I11 ELSE A = GRP_R_I8
    X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    Y = (A % GRP_ROWS) * CARD_HEIGHT
    A = FLOOR(I / GRP_ROWS) * CARD_WIDTH
    R = (I % GRP_ROWS) * CARD_HEIGHT
    GCOPY R_GPAGE, X, Y, X + CARD_WIDTH - 1, Y + CARD_HEIGHT - 1, A, R, 1
@_MODE_START_E2
  NEXT
  FOR I = 0 TO 6 - 1
    A$ = CUR_BOARD$[I]
    IF MID$(A$, 0, 3) == "A08" THEN CUR_BOARD$[I] = "A11" + MID$(A$, 3, 1)
    IF MID$(A$, 0, 3) == "A11" THEN CUR_BOARD$[I] = "A08" + MID$(A$, 3, 1)
  NEXT
@_MODE_START_E1
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE
  GCLS COL_BOARD
  GOSUB @DRAW_BOARD
  GOSUB @SHIPOUT_U_GPAGE

  MODE$ = "@MODE_W_TOKEN"
@_MODE_START_E

  GOSUB @POP_R: NEED_SWAP = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: I = R

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MODE_W_TOKEN '(DUMMY$:STRING): NONE
  R$ = "@MODE_W_TOKEN": ARGNUM = 1: GOSUB @ENTER

  R = I: GOSUB @PUSH_R

  GOSUB @SPPAGE_U
  GOSUB @BGPAGE_L

  GOSUB @DRAW_PURPOSE
  GOSUB @GAME_CON_CLS
  R$ = "@MSG_CHSTKN_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  IF CUR_PURPOSE_DEG == 0 THEN @_MODE_W_TKN_1
  IF CUR_PURPOSE_DEG == 90 AND CUR_PURPOSE$ == "A00" THEN RR$[0]=MSG_HXG$[64]: RR$[1]=MSG_LTRG$
  IF CUR_PURPOSE_DEG == 90 AND CUR_PURPOSE$ == "A13" THEN RR$[0]=MSG_HXG$[65]: RR$[1]=MSG_UTRG$
  IF CUR_PURPOSE_DEG == 270 AND CUR_PURPOSE$ == "A00" THEN RR$[0]=MSG_HXG$[66]: RR$[1]=MSG_LTRG$
  IF CUR_PURPOSE_DEG == 270 AND CUR_PURPOSE$ == "A13" THEN RR$[0]=MSG_HXG$[67]: RR$[1]=MSG_UTRG$
  RN = 2
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  A$ = R$
  R$ = "@MSG_CHSPLSS_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
@_MODE_W_TKN_1  

  R$ = "PLACE": GOSUB @PUSH_RS
  GOSUB @MAIN_PNL_LOOP_R
  IF RR$[0] == "RESET" THEN MODE$ = "@MODE_TITLE": GOTO @_MODE_W_TKN_E

  CUR_TOKEN = VAL(RR$[1])
  R = 0: GOSUB @PUSH_R
  GOSUB @DRAW_TOKEN
  G_PAGE = 1: GPAGE 1, L_GPAGE, L_GPAGE
  GOSUB @DRAW_MINI_CDS2
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE

  IF ST_TERMINALS != 0 THEN @_MODE_W_TKN_NT
  GOSUB @GAME_CON_CLS
  R$ = "@MSG_TERM0_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ == "RESET" THEN MODE$ = "@MODE_TITLE": GOTO @_MODE_W_TKN_E
  RESTORE "@MSG_RSTQYN_" + ST_LANG$
  READ A$
  RA$[0,0] = "\S" + A$
  RA$[0,1] = "Y"
  RA$[1,0] = "\B[B]"
  RA$[1,1] = ""
  RN = 2
  R = -1: GOSUB @PUSH_R
  R = -1: GOSUB @PUSH_R
  GOSUB @POPUP_MNU_RA
  MODE$ = "@MODE_TITLE"
  GOTO @_MODE_W_TKN_E

@_MODE_W_TKN_NT
  IF CUR_TOKEN < 3 THEN A$ = "A13": CUR_PURPOSE$ = "A00" ELSE A$ = "A00": CUR_PURPOSE$ = "A13"
  A$ = A$ + ",S01,S02,S03,S04,S05,S06,S07,S08,S09,S10,S11,S12,S13,S14"
  A$ = A$ + ",D01,D02,D03,D04,D05,D06,D07,D08,D09,D10,D11,D12,D13,D14"
  A$ = A$ + ",H01,H02,H03,H04,H05,H06,H07,H08,H09,H10,H11,H12,H13,H14"
  A$ = A$ + ",C01,C02,C03,C04,C05,C06,C07,C08,C09,C10,C11,C12,C13,C14"
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @SHUFFLE_CARDS
  CUR_TALON$ = A$

  IF CUR_PURPOSE$ == "A00" THEN I = SP_A13 ELSE I = SP_A00
  R$ = STR$(I): GOSUB @PUSH_RS
  GOSUB @FLOAT_SPG

  IF ST_UREV THEN R = GRP_HEIGHT + CARD_HEIGHT ELSE R = GRP_HEIGHT
  SPOFS I, MISSING_X, R, MISSING_TM_U
  R = MISSING_TM_U: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_TKN_AE

  BGOFS 1, LBG1_M_OFS_X, LBG1_M_OFS_Y
  GOSUB @LBG1_B00
  BGOFS 1, LBG1_N_OFS_X, LBG1_N_OFS_Y, MISSING_TM_L
  R = MISSING_TM_L: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_TKN_AE
  GOSUB @LBG1_CLR

  BGMSET BGM_BEEP, SND_CD_SHUFFLE$
  BGMPLAY BGM_BEEP

  R = SND_CD_SH_T: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_TKN_AE

  GOSUB @GAME_CON_CLS
  IF CUR_PURPOSE$ == "A13" THEN A$ ="@MSG_CONDU_" ELSE A$ = "@MSG_CONDL_"
  R$ = A$ + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  IF CUR_PURPOSE$=="A13" THEN A = 5: I = 4 ELSE A = 1: I = 4
  R = A: GOSUB @PUSH_R
  R = SP_TMP_OFFSET + 0: GOSUB @PUSH_R
  GOSUB @PLACE_RDLN_CD

  R = I: GOSUB @PUSH_R
  R = SP_TMP_OFFSET + 1: GOSUB @PUSH_R
  GOSUB @PLACE_RDLN_CD

  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_TKN_AE

@_MODE_W_TKN_AE
  IF R$ == "RESET" THEN MODE$ = "@MODE_TITLE" ELSE MODE$ = "@MODE_W_DRAW"
  SPCLR SP_TMP_OFFSET + 0
  SPCLR SP_TMP_OFFSET + 1
  GOSUB @LBG1_CLR
  IF CUR_PURPOSE$ == "A00" THEN A = SP_A13 ELSE A = SP_A00
  SPOFS A, -1024, -1024
  GOSUB @DRAW_PURPOSE
@_MODE_W_TKN_E
  GOSUB @POP_R: I = R

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MODE_W_DRAW '(DUMMY$:STRING): NONE
  R$ = "@MODE_W_DRAW": ARGNUM = 1: GOSUB @ENTER

  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R

  GOSUB @SPPAGE_U
  GOSUB @BGPAGE_L

  GOSUB @DISPLAY_TLN_NUM
  R = 0
  FOR A = 0 TO 9 - 1
   IF A == 8 THEN A$ = CUR_TALON$ ELSE A$ = CUR_CARDS$[A]
   IF LEN(A$) > 0 THEN A$ = MID$(A$, 0, 3) ELSE A$ = ""
   IF A$ != PREV_FST_CD$[A] THEN R = 1
   PREV_FST_CD$[A] = A$
  NEXT
  IF R THEN GOSUB @LOAD_FST_CD

  CUR_DRAWN$ = MID$(CUR_TALON$, 0, 3)
  IF LEN(CUR_TALON$) > 3 THEN CUR_TALON$=MID$(CUR_TALON$,4,LEN(CUR_TALON$)-4) ELSE CUR_TALON$=""
  A$ = "@" + TAROT_NAME$ + "_" + CUR_DRAWN$ + "_PL"
  RESTORE A$
  FOR A = 0 TO 16 - 1
    READ R$
    IF R$ != "" THEN COLSET "SP", SPPL_DRAWN * 16 + A, R$
  NEXT
  G_PAGE = 0: GPAGE 0, R_GPAGE, U_GPAGE
  A = GRP_R_DRAWN
  R = FLOOR(A / GRP_ROWS) * CARD_WIDTH: GOSUB @PUSH_R
  R = (A % GRP_ROWS) * CARD_HEIGHT: GOSUB @PUSH_R
  R = CARD_WIDTH: GOSUB @PUSH_R
  R = CARD_HEIGHT: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @GSPOIT_CHR_R
  FOR A = 0 TO 8 * 8 - 1
    CHRSET "SPU1", A, RR$[A]
  NEXT
  SPSET SP_DRAWN, 1 * 64 + 0, SPPL_DRAWN, 0, 0, 3, 64, 64
  IF ST_UREV THEN SPHOME SP_DRAWN, CARD_WIDTH - 1, CARD_HEIGHT - 1
  SPOFS SP_DRAWN, -1024, -1024
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE

  GOSUB @GAME_CON_CLS
  R$ = "@MSG_CLKTLN_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  R$ = "TALON": GOSUB @PUSH_RS
  GOSUB @MAIN_PNL_LOOP_R
  IF RR$[0] == "RESET" THEN MODE$ = "@MODE_TITLE": GOTO @_MODE_W_DRW_E
  GOSUB @OMIT_TLN_NUM

  BGOFS 1, LBG1_N_OFS_X, LBG1_N_OFS_Y
  GOSUB @LBG1_B00
  BGOFS 1, LBG1_M_OFS_X, LBG1_M_OFS_Y, DRAW_CD_TM_L
  R = DRAW_CD_TM_L: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_DRW_AE

  IF ST_UREV THEN R = GRP_HEIGHT + CARD_HH + 1 ELSE R = GRP_HEIGHT
  SPOFS SP_B00, MISSING_X, R
  X = DRAWN_X + CARD_HW
  Y = DRAWN_Y + CARD_HH
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS SP_B00, X, Y, DRAW_CD_TM_U
  SPANGLE SP_B00, ST_UREV * 180
  R = DRAW_CD_TM_U: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_DRW_AE

  X = DRAWN_X
  Y = DRAWN_Y
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS SP_DRAWN, X, Y
  SPANGLE SP_B00, ST_UREV * 180 + ANIM_B00_ANGLE, DRAW_CD_TM_A
  R = DRAW_CD_TM_A: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_DRW_AE

  BGMSET BGM_BEEP, SND_CD$
  BGMPLAY BGM_BEEP

@_MODE_W_DRW_AE
  IF CUR_DRAWN$ == "A00" OR CUR_DRAWN$ == "A13" THEN A$ = "@MODE_TERMINAL" ELSE A$ = "@MODE_W_CALC"
  IF R$ == "RESET" THEN MODE$ = "@MODE_TITLE" ELSE MODE$ = A$
  SPOFS SP_B00, -1024, -1024
  SPANGLE SP_B00, ST_UREV * 180
  GOSUB @LBG1_CLR
  X = DRAWN_X
  Y = DRAWN_Y
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS SP_DRAWN, X, Y

@_MODE_W_DRW_E
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MODE_TERMINAL '(DUMMY$:STRING): NONE
  R$ = "@MODE_TERMINAL": ARGNUM = 1: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R

  GOSUB @SPPAGE_U
  GOSUB @BGPAGE_L

  GOSUB @GAME_CON_CLS
  CUR_TERMINALS = CUR_TERMINALS + 1
  IF CUR_TERMINALS >= ST_TERMINALS THEN @_MODE_TERME
@_MODE_TERMN
  R$ = "@MSG_TERMN_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = STR$(CUR_TERMINALS) + "," + STR$(ST_TERMINALS): GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  A$ = CUR_DISCARDED$
  IF LEN(A$) > 0 THEN A$ = A$ + ","
  A$ = A$ + CUR_DRAWN$
  IF LEN(CUR_TALON$) > 0 THEN A$ = A$ + "," + CUR_TALON$
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @SHUFFLE_CARDS
  CUR_TALON$ = R$
  CUR_DISCARDED$ = ""
  CUR_DRAWN$ = ""

  IF ST_UREV THEN R = GRP_HEIGHT + CARD_HEIGHT ELSE R = GRP_HEIGHT
  SPOFS SP_DRAWN, MISSING_X, R, MISSING_TM_U
  R = MISSING_TM_U: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_TERMN_AE

  BGOFS 1, LBG1_M_OFS_X, LBG1_M_OFS_Y
  GOSUB @LBG1_B00
  BGOFS 1, LBG1_N_OFS_X, LBG1_N_OFS_Y, MISSING_TM_L
  R = MISSING_TM_L: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_TERMN_AE

  BGMSET BGM_BEEP, SND_CD_SHUFFLE$
  BGMPLAY BGM_BEEP

  R = SND_CD_SH_T: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN BGMSTOP: GOTO @_MODE_TERMN_AE

@_MODE_TERMN_AE
  IF R$ == "RESET" THEN MODE$ = "@MODE_TITLE" ELSE MODE$ = "@MODE_W_DRAW"
  GOSUB @LBG1_CLR
  SPOFS SP_DRAWN, -1024, -1024
  GOTO @_MODE_TERM_E

@_MODE_TERME
  LAST_DISP = 1
  IF CUR_PURPOSE$ == "A13" THEN I = 5: J = 4 ELSE I = 1: J = 4
  R$ = "@MSG_TERME_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = STR$(ST_TERMINALS): GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_TERME_AE

  GOSUB @GAME_CON_CLS
  IF CUR_PURPOSE$ == "A13" THEN A$ = "@MSG_TERMU_" ELSE A$ = "@MSG_TERML_"
  R$ = A$ + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  R = I: GOSUB @PUSH_R
  R = SP_TMP_OFFSET + 0: GOSUB @PUSH_R
  GOSUB @PLACE_RDLN_CD

  R = J: GOSUB @PUSH_R
  R = SP_TMP_OFFSET + 1: GOSUB @PUSH_R
  GOSUB @PLACE_RDLN_CD

  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_TERME_AE

@_MODE_TERME_AE
  MODE$ = "@MODE_TITLE"
  IF R$ == "RESET" THEN @_MODE_TERM_E

  SPCLR SP_TMP_OFFSET + 0
  SPCLR SP_TMP_OFFSET + 1
  GOSUB @GAME_CON_CLS
  IF CUR_TOKEN == I OR CUR_TOKEN == J THEN A$ = "@MSG_YWIN_" ELSE A$ = "@MSG_YLOSE_"
  R$ = A$ + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ == "RESET" THEN @_MODE_TERM_E

  GOSUB @DISPLAY_TLN_NUM
  RESTORE "@MSG_RSTQYN_" + ST_LANG$
  READ A$
  RA$[0,0] = "\S" + A$
  RA$[0,1] = "Y"
  RA$[1,0] = "\B[B]"
  RA$[1,1] = ""
  RN = 2
  R = -1: GOSUB @PUSH_R
  R = -1: GOSUB @PUSH_R
  GOSUB @POPUP_MNU_RA

@_MODE_TERM_E
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MODE_W_CALC '(DUMMY$:STRING): NONE
  R$ = "@MODE_W_CALC": ARGNUM = 1: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R
  R = UTRGQ: GOSUB @PUSH_R
  R = SUIT: GOSUB @PUSH_R
  R = MOVEQ: GOSUB @PUSH_R
  R = CLICKQ: GOSUB @PUSH_R
  R = RIGHTQ: GOSUB @PUSH_R
  R = LEFT_N: GOSUB @PUSH_R
  R = RIGHT_N: GOSUB @PUSH_R
  R = POS: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R$ = CDS$: GOSUB @PUSH_RS
  R$ = CUR_MOVE$: GOSUB @PUSH_RS
  R$ = CUR_CHANGE$: GOSUB @PUSH_RS
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1

  LEFT_N = 0
  RIGHT_N = 0
  CLICKQ = 0
  CUR_MOVE$ = ""

  GOSUB @SPPAGE_U
  GOSUB @BGPAGE_L

  GOSUB @GAME_CON_CLS

  UTRGQ = (CUR_TOKEN >= 3)
  IF UTRGQ THEN RR$[0] = MSG_UTRG$ ELSE RR$[0] = MSG_LTRG$
  SUIT = INSTR("SDHC", MID$(CUR_DRAWN$, 0, 1))
  A$ = STR$(VAL(MID$(CUR_DRAWN$, 1, 2)))
  IF SUIT == 0 THEN RR$[1] = MSG_SWORD$
  IF SUIT == 1 THEN RR$[1] = MSG_COIN$
  IF SUIT == 2 THEN RR$[1] = MSG_CUP$
  IF SUIT == 3 THEN RR$[1] = MSG_WAND$
  RR$[2] = A$
  IF A$ == "1" THEN RR$[2] = MSG_ACE$
  IF A$ == "11" THEN RR$[2] = MSG_JACK$
  IF A$ == "12" THEN RR$[2] = MSG_CABALLERO$
  IF A$ == "13" THEN RR$[2] = MSG_QUEEN$
  IF A$ == "14" THEN RR$[2] = MSG_KING$
  RN = 3
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  A$ = R$

  R$ = "@MSG_DREW_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  R$ = "@MSG_CLKTLN_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  GOSUB @DISPLAY_TLN_NUM
  R$ = "TALON": GOSUB @PUSH_RS
  GOSUB @MAIN_PNL_LOOP_R
  IF RR$[0] == "RESET" THEN MODE$ = "@MODE_TITLE": GOTO @_MODE_W_CAL_E
  GOSUB @OMIT_TLN_NUM

  CUR_SUITABLE$ = ""
  CUR_EXP_L$ = "": CUR_EXP_R$ = ""
  CUR_SRC_N = 0

  S$ = RULE_COMP$[UTRGQ, SUIT]
  IF S$ == "STAY" THEN MOVEQ = 0: GOTO @_MODE_W_CAL_1
  IF S$ == "MOVE" THEN MOVEQ = 1: GOTO @_MODE_W_CAL_1

  I = INSTR(0, S$, ">")
  R$ = MID$(S$, 0, I): GOSUB @PUSH_RS
  GOSUB @SPLIT_EXP_ADD_R
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  CUR_EXP_L$ = R$
  R$ = MID$(S$, I + 1, LEN(S$) - I - 1): GOSUB @PUSH_RS
  GOSUB @SPLIT_EXP_ADD_R
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  CUR_EXP_R$ = R$

  R$ = S$: GOSUB @PUSH_RS
  GOSUB @REDUCE_EXP_NUM
  IF RT$ != "NONE" AND R != 0 THEN MOVEQ = 1: GOTO @_MODE_W_CAL_1
  MOVEQ = 0
@_MODE_W_CAL_1
  IF MOVEQ AND RULE_MOVE$[UTRGQ, SUIT] == "CHOOSE" THEN MOVEQ = 2

  IF S$ != "STAY" THEN @_MODE_W_CAL_NS
  GOSUB @GAME_CON_CLS
  R$ = "@MSG_OSTAY_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C
  GOTO @_MODE_W_CAL_C

@_MODE_W_CAL_NS
  IF S$ != "MOVE" THEN @_MODE_W_CAL_NM
  IF MOVEQ == 2 THEN R$ = "NONE": GOTO @_MODE_W_CAL_C
  GOSUB @GAME_CON_CLS
  R$ = "@MSG_OMOVE_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C
  GOTO @_MODE_W_CAL_C

@_MODE_W_CAL_NM
  BGMSET BGM_BEEP, SND_SRBN_CLR$
  BGMPLAY BGM_BEEP
  CUR_SOROBAN_L = 0
  CUR_SOROBAN_R = 0
  GOSUB @DRAW_SRBN_TAMA

  R = SND_SRBN_CLR_T: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN BGMSTOP: GOTO @_MODE_W_CAL_C

  BGMSET BGM_BEEP, SND_SRBN$

  R$ = CUR_EXP_L$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  LEFT_N = RN
  R = LEFT_N: GOSUB @ADD_STACK
  FOR I = 0 TO LEFT_N - 1
    STACK$[RBP + I] = RR$[I]
  NEXT
  R$ = CUR_EXP_R$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  RIGHT_N = RN
  R = RIGHT_N: GOSUB @ADD_STACK
  FOR I = 0 TO RIGHT_N - 1
    STACK$[RBP + LEFT_N + I] = RR$[I]
  NEXT

  RIGHTQ = 0
@_MODE_W_CAL_S1
  IF RIGHTQ >= 2 THEN @_MODE_W_CAL_S1E
  I = 0
@_MODE_W_CAL_S2
  IF ! RIGHTQ AND I >= LEFT_N THEN @_MODE_W_CAL_S2E
  IF RIGHTQ AND I >= RIGHT_N THEN @_MODE_W_CAL_S2E

  GOSUB @GAME_CON_CLS
  A$ = ""
  FOR J = 0 TO LEFT_N - 1
    IF A$ != "" THEN A$ = A$ + "+"
    R$ = STACK$[RBP + J]
    IF ! RIGHTQ AND I == J THEN R$ = "\c4" + R$ + "\cR"
    A$ = A$ + R$
  NEXT
  CON_DECORATE = FALSE
  R = 1: GOSUB @PUSH_R
  R = LAST_CX[1]: GOSUB @PUSH_R
  R = LAST_CY[1]: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  A$ = ""
  FOR J = 0 TO RIGHT_N - 1
    IF A$ != "" THEN A$ = A$ + "+"
    R$ = STACK$[RBP + LEFT_N + J]
    IF RIGHTQ AND I == J THEN R$ = "\c4" + R$ + "\cR"
    A$ = A$ + R$
  NEXT
  A$ = "> " + A$ + "?"
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = LAST_CY[1] + 1: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  CON_DECORATE = TRUE
  R = FLASH_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C

  R$ = STACK$[RBP + RIGHTQ * LEFT_N + I]: GOSUB @PUSH_RS
  GOSUB @REDUCE_EXP_CDS_R
  IF RT$ == "NONE" THEN CDS$ = "NONE" ELSE GOSUB @PUSH_RR: GOSUB @POP_RS: CDS$ = R$
  R$ = STACK$[RBP + RIGHTQ * LEFT_N + I]: GOSUB @PUSH_RS
  GOSUB @SPLIT_EXP_POS_R
  IF RR$[0] == "" THEN POS = -1 ELSE POS = VAL(RR$[0])
  IF RR$[1] == "A" THEN @_MODE_W_CAL_SA
  IF CDS$ == "" OR CDS$ == "NONE" THEN @_MODE_W_CAL_SN
  IF LEN(CDS$) < 4 THEN @_MODE_W_CAL_SM
  J = 0
  STACK$[RBP + RIGHTQ * LEFT_N + I] = "0"
@_MODE_W_CAL_S3
  IF J * 4 > LEN(CDS$) THEN @_MODE_W_CAL_S3E
  R$ = MID$(CDS$, J * 4, 3): GOSUB @PUSH_RS
  GOSUB @CARD_TO_DCHR
  S$ = R$
  R$ = MID$(CDS$, J * 4, 3): GOSUB @PUSH_RS
  GOSUB @CARD_TO_SCORE
  S$ = S$ + " = " + STR$(R)
  IF RIGHTQ THEN CUR_SOROBAN_R = CUR_SOROBAN_R + R ELSE CUR_SOROBAN_L = CUR_SOROBAN_L + R
  A = VAL(STACK$[RBP + RIGHTQ * LEFT_N + I])
  STACK$[RBP + RIGHTQ * LEFT_N + I] = STR$(A + R)
  GOSUB @GAME_CON_CLS
  R = 1: GOSUB @PUSH_R
  R = LAST_CX[1]: GOSUB @PUSH_R
  R = LAST_CY[1]: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  BGMPLAY BGM_BEEP 
  R$ = "CARD": GOSUB @PUSH_RS
  R = POS: GOSUB @PUSH_R
  R$ = STR$(J): GOSUB @PUSH_RS
  GOSUB @PLACE_RDLN
  GOSUB @DRAW_SRBN_TAMA
  R = FLASH_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C
  J = J + 1
  GOTO @_MODE_W_CAL_S3
@_MODE_W_CAL_S3E
  GOTO @_MODE_W_CAL_S2A

@_MODE_W_CAL_SA
  A$ = CUR_BOARD$[POS]
  S$ = MSG_TRTMJ$[VAL(MID$(A$, 1, 2))]
  IF MID$(A$, 3, 1) == "R" THEN S$ = S$ + "(" + MSG_INV$ + ")"
  S$ = S$ + "[" + RR$[2] + "] = "
  R$ = A$ + "[" + RR$[2] + "]": GOSUB @PUSH_RS
  GOSUB @CARD_TO_SCORE
  S$ = S$ + STR$(R)
  IF RIGHTQ THEN CUR_SOROBAN_R = CUR_SOROBAN_R + R ELSE CUR_SOROBAN_L = CUR_SOROBAN_L + R
  STACK$[RBP + RIGHTQ * LEFT_N + I] = STR$(R)
  GOSUB @GAME_CON_CLS
  R = 1: GOSUB @PUSH_R
  R = LAST_CX[1]: GOSUB @PUSH_R
  R = LAST_CY[1]: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  BGMPLAY BGM_BEEP 
  R$ = "MAJOR": GOSUB @PUSH_RS
  R = POS: GOSUB @PUSH_R
  R$ = "": GOSUB @PUSH_RS
  GOSUB @PLACE_RDLN
  GOSUB @DRAW_SRBN_TAMA
  R = FLASH_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C
  GOTO @_MODE_W_CAL_S2A

@_MODE_W_CAL_SN
  J = INSTR(STACK$[RBP + RIGHTQ * LEFT_N + I], "Suitable")
  STACK$[RBP + RIGHTQ * LEFT_N + I] = "0"
  GOSUB @GAME_CON_CLS
  IF CDS$ == "NONE" THEN A$ = "@MSG_CDNEED_" ELSE A$ = "@MSG_CDNONE_"
  IF CDS$ == "NONE" AND J != -1 THEN A$ = "@MSG_CDNSUT_"
  R$ = A$ + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  IF CDS$ == "NONE" THEN A = DISPLAY_MSG_TM ELSE A = FLASH_MSG_TM
  R = A: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C
  IF CDS$ == "NONE" THEN @_MODE_W_CAL_C
  GOTO @_MODE_W_CAL_S2A

@_MODE_W_CAL_SM
  IF POS == -1 THEN J = 0 ELSE J = FLOOR(INSTR(CUR_CARDS$[POS], CDS$) / 4)
  R$ = CDS$: GOSUB @PUSH_RS
  GOSUB @CARD_TO_DCHR
  S$ = R$
  R$ = CDS$: GOSUB @PUSH_RS
  GOSUB @CARD_TO_SCORE
  S$ = S$ + " = " + STR$(R)
  IF RIGHTQ THEN CUR_SOROBAN_R = CUR_SOROBAN_R + R ELSE CUR_SOROBAN_L = CUR_SOROBAN_L + R
  STACK$[RBP + RIGHTQ * LEFT_N + I] = STR$(R)
  GOSUB @GAME_CON_CLS
  R = 1: GOSUB @PUSH_R
  R = LAST_CX[1]: GOSUB @PUSH_R
  R = LAST_CY[1]: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  BGMPLAY BGM_BEEP 
  R$ = "CARD": GOSUB @PUSH_RS
  R = POS: GOSUB @PUSH_R
  R$ = STR$(J): GOSUB @PUSH_RS
  GOSUB @PLACE_RDLN
  GOSUB @DRAW_SRBN_TAMA
  R = FLASH_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C
  GOTO @_MODE_W_CAL_S2A
@_MODE_W_CAL_S2A
  I = I + 1
  GOTO @_MODE_W_CAL_S2
@_MODE_W_CAL_S2E
  RIGHTQ = RIGHTQ + 1
  GOTO @_MODE_W_CAL_S1
@_MODE_W_CAL_S1E

  GOSUB @GAME_CON_CLS
  A$ = ""
  FOR J = 0 TO LEFT_N - 1
    IF A$ != "" THEN A$ = A$ + "+"
    A$ = A$ + STACK$[RBP + J]
  NEXT
  CON_DECORATE = FALSE
  R = 1: GOSUB @PUSH_R
  R = LAST_CX[1]: GOSUB @PUSH_R
  R = LAST_CY[1]: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  A$ = ""
  FOR J = 0 TO RIGHT_N - 1
    IF A$ != "" THEN A$ = A$ + "+"
    A$ = A$ + STACK$[RBP + LEFT_N + J]
  NEXT
  A$ = "> " + A$ + "?"
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = LAST_CY[1] + 1: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  CON_DECORATE = TRUE
  R = FLASH_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C

  A = 0
  FOR I = 0 TO LEFT_N - 1
    A = A + VAL(STACK$[RBP + I])
  NEXT
  RR$[0] = STR$(A)
  A = 0
  FOR I = 0 TO RIGHT_N - 1
    A = A + VAL(STACK$[RBP + LEFT_N + I])
  NEXT
  RR$[1] = STR$(A)
  RN = 2
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  S$ = R$

  GOSUB @GAME_CON_CLS
  IF MOVEQ THEN A$ = "@MSG_GMOVE_" ELSE A$ = "@MSG_LSTAY_"
  IF MOVEQ == 2 THEN A$ = "@MSG_GCHSE_"
  R$ = A$ + ST_LANG$: GOSUB @PUSH_RS
  R$ = S$: GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  R = DISPLAY_MSG_TM: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_C

@_MODE_W_CAL_C
  S$ = R$
  GOSUB @OMIT_RDLN
  R$ = S$
  IF R$ == "RESET" THEN @_MODE_W_CAL_AE
  IF MOVEQ != 2 AND R$ != "NONE" THEN CLICKQ = 1
  IF MOVEQ == 0 THEN R$ = RULE_STAY$[UTRGQ, SUIT]: GOTO @_MODE_W_CAL_D
  IF MOVEQ == 1 THEN R$ = RULE_MOVE$[UTRGQ, SUIT]: GOTO @_MODE_W_CAL_D

  GOSUB @GAME_CON_CLS
  R$ = "@MSG_MOVEQ_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  GOSUB @DISPLAY_TLN_NUM
@_MODE_W_CAL_CL
  RA$[0, 0] = "\B[B]"
  RA$[0, 1] = ""
  RA$[1, 0] = "\B[Y]"
  RA$[1, 1] = "Y"
  RA$[2, 0] = "\B[X]"
  RA$[2, 1] = "N"
  RA$[3, 0] = "\N[Y]" + MSG_MOVE$
  RA$[3, 1] = "Y"
  RA$[4, 0] = "\N[X]" + MSG_STAY$
  RA$[4, 1] = "N"
  RA$[5, 0] = "\B[START]"
  RA$[5, 1] = "RSTQ"
  RN = 6
  R = -1: GOSUB @PUSH_R
  R = -1: GOSUB @PUSH_R
  GOSUB @POPUP_MNU_RA
  IF R$ != "RSTQ" THEN @_MODE_W_CAL_CE
  GOSUB @POPUP_RSTQ
  IF R THEN R$ = "RESET": GOTO @_MODE_W_CAL_AE
  GOTO @_MODE_W_CAL_CL
@_MODE_W_CAL_CE
  S$ = R$
  GOSUB @OMIT_TLN_NUM
  IF S$ == "Y" THEN MOVEQ = 1: R$ = RULE_MOVE_C$[UTRGQ, SUIT]
  IF S$ == "N" THEN MOVEQ = 0: R$ = RULE_STAY_C$[UTRGQ, SUIT]

@_MODE_W_CAL_D
  CUR_CHANGE$ = R$
  R$ = CUR_CHANGE$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  CUR_SRC_N = RN
  IF MOVEQ THEN CUR_MOVE$ = RR$[0]: CUR_SRC_N = CUR_SRC_N - 1
  FOR I = 0 TO CUR_SRC_N - 1
    A$ = RR$[I + !! MOVEQ]
    A = INSTR(A$, "⇒")
    CUR_SRC$[I] = MID$(A$, 0, A)
    CUR_DEST$[I] = MID$(A$, A + 1, LEN(A$) - A - 1)
  NEXT
  NEXT_TOKEN = CUR_TOKEN
  NEXT_DISCARDED$ = CUR_DISCARDED$
  FOR I = 0 TO 8 - 1
    NEXT_CARDS$[I] = CUR_CARDS$[I]
  NEXT
  FOR I = 0 TO CUR_SRC_N - 1
    CUR_SRC_CDS$[I] = "": CUR_SRC_SPG$[I] = ""
    CUR_SRC_POS[I] = -1: CUR_DEST_POS[I] = -1
  NEXT
  FOR I = 0 TO CUR_SRC_N - 1
    R$ = CUR_SRC$[I]: GOSUB @PUSH_RS
    GOSUB @SPLIT_EXP_POS_R
    IF RR$[0] == "" THEN CUR_SRC_CDS$[I] = CUR_DRAWN$: GOTO @_MODE_W_CAL_D1
    CUR_SRC_POS[I] = VAL(RR$[0])
    R$ = CUR_SRC$[I]: GOSUB @PUSH_RS
    GOSUB @REDUCE_EXP_CDS_R
    GOSUB @PUSH_RR
    GOSUB @POP_RS
    CUR_SRC_CDS$[I] = R$
    R$ = CUR_CARDS$[CUR_SRC_POS[I]]: GOSUB @PUSH_RS
    R$ = CUR_SRC_CDS$[I]: GOSUB @PUSH_RS
    GOSUB @DELETE_CARDS
    CUR_CARDS$[CUR_SRC_POS[I]] = R$
    NEXT_CARDS$[CUR_SRC_POS[I]] = R$
@_MODE_W_CAL_D1
    IF CUR_DEST$[I] == "×" THEN @_MODE_W_CAL_D2
    R$ = CUR_DEST$[I]: GOSUB @PUSH_RS
    GOSUB @SPLIT_EXP_POS_R
    CUR_DEST_POS[I] = VAL(RR$[0])
    R$ = CUR_CARDS$[CUR_DEST_POS[I]]: GOSUB @PUSH_RS
    R$ = CUR_SRC_CDS$[I]: GOSUB @PUSH_RS
    GOSUB @APPEND_CARDS
    NEXT_CARDS$[CUR_DEST_POS[I]] = R$
    GOTO @_MODE_W_CAL_D3
@_MODE_W_CAL_D2
    R$ = CUR_DISCARDED$: GOSUB @PUSH_RS
    R$ = CUR_SRC_CDS$[I]: GOSUB @PUSH_RS
    GOSUB @APPEND_CARDS
    NEXT_DISCARDED$ = R$
@_MODE_W_CAL_D3
  NEXT

  IF CUR_MOVE$ == "←" THEN NEXT_TOKEN = CUR_TOKEN + 1
  IF CUR_MOVE$ == "→" THEN NEXT_TOKEN = CUR_TOKEN - 1
  IF CUR_MOVE$ == "↑" THEN NEXT_TOKEN = CUR_TOKEN + 3
  IF CUR_MOVE$ == "↓" THEN NEXT_TOKEN = CUR_TOKEN - 3
  IF NEXT_TOKEN < 0 THEN NEXT_TOKEN = 5
  IF NEXT_TOKEN > 5 THEN NEXT_TOKEN = 0

  IF CLICKQ THEN @_MODE_W_CAL_AE

  GOSUB @GAME_CON_CLS
  R$ = "@MSG_CRULE_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  R = 1: GOSUB @PUSH_R
  R = LAST_CX[1]: GOSUB @PUSH_R
  R = LAST_CY[1]: GOSUB @PUSH_R
  R$ = CUR_CHANGE$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  FOR I = 0 TO CUR_SRC_N - 1
    IF CUR_SRC_POS[I] == -1 THEN CUR_SRC_SPG$[I] = STR$(SP_DRAWN): GOTO @_MODE_W_CAL_D4
    A$ = CUR_CARDS$[CUR_SRC_POS[I]]
    IF CUR_SRC_CDS$[I] == "" THEN CUR_SRC_SPG$[I] = "": GOTO @_MODE_W_CAL_D4
    IF LEN(CUR_SRC_CDS$[I]) != 3 THEN @_MODE_W_CAL_D5
    R$ = CUR_SRC_CDS$[I]: GOSUB @PUSH_RS
    R = SP_TMP_OFFSET + I * 2: GOSUB @PUSH_R
    R = SP_TMP_OFFSET + I * 2 + 1: GOSUB @PUSH_R
    GOSUB @MAKE_CD_SPG
    CUR_SRC_SPG$[I] = R$
    A$ = CARDS_ANCHOR$[CUR_SRC_POS[I]]
    R$ = ""
    IF MID$(A$,0,1)=="S" OR MID$(A$,0,1)=="N" THEN R$=MID$(A$,0,1): A$=MID$(A$,1,LEN(A$)-1)
    X = FLOOR(CARDS_W / 2 - CARD_WIDTH / 2)
    Y = FLOOR(CARDS_H / 2 - CARD_HEIGHT / 2)
    IF R$ == "N" THEN Y = 0
    IF R$ == "S" THEN Y = CARDS_H - CARD_HEIGHT
    IF A$ == "W" THEN X = 0
    IF A$ == "E" THEN X = CARDS_W - CARD_WIDTH
    X = CARDS_X[CUR_SRC_POS[I]] + X
    Y = CARDS_Y[CUR_SRC_POS[I]] + Y
    IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
    R$ = CUR_SRC_SPG$[I]: GOSUB @PUSH_RS
    R = X: GOSUB @PUSH_R
    R = Y: GOSUB @PUSH_R
    R = 0: GOSUB @PUSH_R
    GOSUB @SPG_OFS
    GOTO @_MODE_W_CAL_D4
@_MODE_W_CAL_D5
    CUR_SRC_SPG$[I] = CUR_SPG$[CUR_SRC_POS[I]]
    CUR_SPG$[CUR_SRC_POS[I]] = ""
    R$ = CUR_SRC_SPG$[I]: GOSUB @PUSH_RS
    GOSUB @RESTORE_CDS_CD0
    R$ = CUR_SRC_SPG$[I]: GOSUB @PUSH_RS
    GOSUB @FLOAT_SPG
@_MODE_W_CAL_D4
  NEXT

  R = 0
  FOR A = 0 TO 9 - 1
   IF A == 8 THEN A$ = CUR_TALON$ ELSE A$ = CUR_CARDS$[A]
   IF LEN(A$) > 0 THEN A$ = MID$(A$, 0, 3) ELSE A$ = ""
   IF A$ != PREV_FST_CD$[A] THEN R = 1
   PREV_FST_CD$[A] = A$
  NEXT
  IF R THEN GOSUB @LOAD_FST_CD
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE
  GCLS COL_BOARD
  GOSUB @DRAW_BOARD
  GOSUB @DRAW_FST_CD
  GOSUB @SHIPOUT_U_GPAGE
  GOSUB @REDRAW_CDS

  FOR I = 0 TO CUR_SRC_N - 1
    IF CUR_SRC_CDS$[I] == "" THEN @_MODE_W_CAL_A3
    A = CUR_DEST_POS[I]
    W = CARDS_W
    H = CARDS_H
    IF LEN(CUR_SRC_CDS$[I]) == 3 THEN W = CARD_WIDTH: H = CARD_HEIGHT
    IF A == -1 THEN X = MISSING_X: Y = GRP_HEIGHT + H * ST_UREV: GOTO @_MODE_W_CAL_A1
    IF A < 6 THEN X=CARD_X[A]+FLOOR(CARD_WIDTH/2-W/2): Y=CARD_Y[A]+FLOOR(CARD_HEIGHT/2-H/2)
    IF A >= 6 THEN X=CARDS_X[A]+FLOOR(CARDS_W/2-W/2): Y=CARDS_Y[A]+FLOOR(CARDS_H/2-H/2)
    IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
@_MODE_W_CAL_A1
    R$ = CUR_SRC_SPG$[I]: GOSUB @PUSH_RS
    R = X: GOSUB @PUSH_R
    R = Y: GOSUB @PUSH_R
    R = MISSING_TM_U: GOSUB @PUSH_R
    GOSUB @SPG_OFS
@_MODE_W_CAL_A3
  NEXT
  R = MISSING_TM_U: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_AE

  A$ = ""
  FOR I = 0 TO CUR_SRC_N - 1
    IF CUR_DEST$[I] != "×" THEN @_MODE_W_CAL_A2
    R$ = A$: GOSUB @PUSH_RS
    R$ = CUR_SRC_CDS$[I]: GOSUB @PUSH_RS
    GOSUB @APPEND_CARDS
    A$ = R$
@_MODE_W_CAL_A2
  NEXT

  BGOFS 1, LBG1_M_OFS_X, LBG1_M_OFS_Y
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @LBG1_DISCARDED
  BGOFS 1, LBG1_N_OFS_X, LBG1_N_OFS_Y, MISSING_TM_L
  R = MISSING_TM_L: GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_AE

  BGMSET BGM_BEEP, SND_CD$
  BGMPLAY BGM_BEEP

  IF CUR_MOVE$ == "" THEN R$ = "NONE": GOTO @_MODE_W_CAL_AE
  CUR_TOKEN = NEXT_TOKEN
  R = MOVE_TOKEN_TM: GOSUB @PUSH_R
  GOSUB @DRAW_TOKEN
  SPSCALE SP_TOKEN, ANIM_TOKEN_MAG, FLOOR(MOVE_TOKEN_TM / 2)
  R = FLOOR(MOVE_TOKEN_TM / 2): GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_AE
  SPSCALE SP_TOKEN, 100, FLOOR(MOVE_TOKEN_TM / 2) + (MOVE_TOKEN_TM % 2)
  R = FLOOR(MOVE_TOKEN_TM / 2) + (MOVE_TOKEN_TM % 2): GOSUB @PUSH_R
  GOSUB @CHECK_CLICK
  IF R$ != "NONE" THEN @_MODE_W_CAL_AE

@_MODE_W_CAL_AE
  IF R$ == "RESET" THEN MODE$ = "@MODE_TITLE" ELSE MODE$ = "@MODE_W_DRAW"
  GOSUB @LBG1_CLR
  SPOFS SP_DRAWN, -1024, -1024
  FOR I = 0 TO CUR_SRC_N -1
    R$ = CUR_SRC_SPG$[I]: GOSUB @PUSH_RS
    GOSUB @SPRITE_FREE
    CUR_SRC_SPG$[I] = ""
  NEXT
  CUR_TOKEN = NEXT_TOKEN
  CUR_DISCARDED$ = NEXT_DISCARDED$
  FOR I = 0 TO 8 - 1
    CUR_CARDS$[I] = NEXT_CARDS$[I]
  NEXT

  R = 0
  FOR A = 0 TO 9 - 1
   IF A == 8 THEN A$ = CUR_TALON$ ELSE A$ = CUR_CARDS$[A]
   IF LEN(A$) > 0 THEN A$ = MID$(A$, 0, 3) ELSE A$ = ""
   IF A$ != PREV_FST_CD$[A] THEN R = 1
   PREV_FST_CD$[A] = A$
  NEXT
  IF R THEN GOSUB @LOAD_FST_CD
  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE
  GCLS COL_BOARD
  GOSUB @DRAW_BOARD
  GOSUB @DRAW_FST_CD
  GOSUB @SHIPOUT_U_GPAGE
  GOSUB @REDRAW_CDS

  SPSCALE SP_TOKEN, 100
  R = 0: GOSUB @PUSH_R
  GOSUB @DRAW_TOKEN

@_MODE_W_CAL_E
  R = LEFT_N + RIGHT_N: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_RS: CUR_CHANGE$ = R$
  GOSUB @POP_RS: CUR_MOVE$ = R$
  GOSUB @POP_RS: CDS$ = R$
  GOSUB @POP_RS: S$ = R$
  GOSUB @POP_R: POS = R
  GOSUB @POP_R: RIGHT_N = R
  GOSUB @POP_R: LEFT_N = R
  GOSUB @POP_R: RIGHTQ = R
  GOSUB @POP_R: CLICKQ = R
  GOSUB @POP_R: MOVEQ = R
  GOSUB @POP_R: SUIT = R
  GOSUB @POP_R: UTRGQ = R
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@APPEND_CARDS '(CDS1$:SARRAY, CDS2$:SARRAY), : SARRAY
  R$ = "@APPEND_CARDS": ARGNUM = 2: GOSUB @ENTER

  R$ = CDS1$: GOSUB @PUSH_RS
  R$ = CDS2$: GOSUB @PUSH_RS

  CDS1$ = STACK$[BP + 1]
  CDS2$ = STACK$[BP + 2]

  IF CDS2$ == "" THEN @_APPEND_CDS_E
  IF CDS1$ != "" THEN CDS1$ = CDS1$ + ","
  CDS1$ = CDS1$ + CDS2$
@_APPEND_CDS_E
  A$ = CDS1$

  GOSUB @POP_RS: CDS2$ = R$
  GOSUB @POP_RS: CDS1$ = R$

  ARGNUM = 2: GOSUB @LEAVE
  RT$ = "STRING"
  R$ = A$
  RETURN


@DELETE_CARDS '(CDS1$:SARRAY, CDS2$:SARRAY), : SARRAY
  R$ = "@DELETE_CARDS": ARGNUM = 2: GOSUB @ENTER

  R$ = CDS1$: GOSUB @PUSH_RS
  R$ = CDS2$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R

  CDS1$ = STACK$[BP + 1]
  CDS2$ = STACK$[BP + 2]

  IF CDS1$ == CDS2$ THEN CDS1$ = "": GOTO @_DELETE_CDS_E
  R$ = CDS2$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  I = 0
@_DELETE_CDS_1
  IF I >= RN THEN @_DELETE_CDS_E
  A = INSTR(CDS1$, RR$[I])
  I = I + 1
  IF A == -1 THEN @_DELETE_CDS_1
  A$ = MID$(CDS1$, 0, A)
  IF LEN(CDS1$) > A + 3 THEN A$ = A$ + MID$(CDS1$, A + 4, LEN(CDS1$) - A - 4)
  IF LEN(CDS1$) <= A + 3 AND A > 0 THEN A$ = MID$(CDS1$, 0, A - 1)
  CDS1$ = A$
  GOTO @_DELETE_CDS_1
@_DELETE_CDS_E
  A$ = CDS1$

  GOSUB @POP_R: I = R
  GOSUB @POP_RS: CDS2$ = R$
  GOSUB @POP_RS: CDS1$ = R$

  ARGNUM = 2: GOSUB @LEAVE
  RT$ = "STRING"
  R$ = A$
  RETURN


@SHUFFLE_CARDS '(CDS$:SARRAY): SARRAY
  R$ = "@SHUFFLE_CARDS": ARGNUM = 1: GOSUB @ENTER

  R$ = CDS$: GOSUB @PUSH_RS
  R = N: GOSUB @PUSH_R

  CDS$ = STACK$[BP + 1]

  N = FLOOR((LEN(CDS$) + 1) / 4)
  A$ = ""
  CDS$ = CDS$ + ","
@_SHUFFLE_CARDS_1
  IF N <= 0 THEN @_SHUFFLE_CARDS_E
  A = RND(N)
  A$ = A$ + MID$(CDS$, A * 4, 4)
'  CDS$ = SUBST$(CDS$, A * 4, 4, "") 'This doesn't work!
  IF A == 0 THEN CDS$ = MID$(CDS$, 4, LEN(CDS$) - 4)
  IF A != 0 THEN CDS$ = SUBST$(CDS$, A * 4 - 1, 5, ",") 
  N = N - 1
  GOTO @_SHUFFLE_CARDS_1

@_SHUFFLE_CARDS_E
  IF LEN(A$) > 0 THEN A$ = MID$(A$, 0, LEN(A$) - 1)

  GOSUB @POP_R: N = R
  GOSUB @POP_RS: CDS$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = "STRING"
  R$ = A$
  RETURN


@CARD_TO_ID_NUM '(NAME$:STRING): NUMBER
  R$ = "@CARD_TO_ID_NUM": ARGNUM = 1: GOSUB @ENTER

  R$ = NAME$: GOSUB @PUSH_RS
  R$ = SUIT$: GOSUB @PUSH_RS
  R = NUM: GOSUB @PUSH_R

  NAME$ = STACK$[BP + 1]

  SUIT$ = MID$(NAME$, 0, 1)
  NUM = VAL(MID$(NAME$, 1, 2))

  A$ = "STRING"
  IF SUIT$ == "A" THEN A = 0 + NUM: GOTO @_CARD_TO_IDNUM_1
  IF SUIT$ == "S" THEN A = 22 + 0 * 14 + NUM - 1: GOTO @_CARD_TO_IDNUM_1
  IF SUIT$ == "D" THEN A = 22 + 1 * 14 + NUM - 1: GOTO @_CARD_TO_IDNUM_1
  IF SUIT$ == "H" THEN A = 22 + 2 * 14 + NUM - 1: GOTO @_CARD_TO_IDNUM_1
  IF SUIT$ == "C" THEN A = 22 + 3 * 14 + NUM - 1: GOTO @_CARD_TO_IDNUM_1
  IF SUIT$ == "B" THEN A = 22 + 4 * 14 + NUM: GOTO @_CARD_TO_IDNUM_1

  A$ = "ERROR"
  RE$ = "No id number for " + NAME$ + "."
  A  = 0

@_CARD_TO_IDNUM_1

  GOSUB @POP_R: NUM = R
  GOSUB @POP_RS: SUIT$ = R$
  GOSUB @POP_RS: NAME$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = A$
  R = A
  RETURN


@CARD_TO_SUIT_NUM '(NAME$:STRING): NUMBER
  R$ = "@CARD_TO_SUIT_NUM": ARGNUM = 1: GOSUB @ENTER

  R$ = NAME$: GOSUB @PUSH_RS

  NAME$ = STACK$[BP + 1]

  A$ = MID$(NAME$, 0, 1)
  A = VAL(MID$(NAME$, 1, 2))

  IF A$ == "A" THEN A = A % 2: GOTO @_CARD_TO_SNUM_1
  IF A$ == "S" THEN A = 2: GOTO @_CARD_TO_SNUM_1
  IF A$ == "D" THEN A = 3: GOTO @_CARD_TO_SNUM_1
  IF A$ == "H" THEN A = 4: GOTO @_CARD_TO_SNUM_1
  IF A$ == "C" THEN A = 5: GOTO @_CARD_TO_SNUM_1
  IF A$ == "B" THEN A = 6: GOTO @_CARD_TO_SNUM_1
  A = -1

@_CARD_TO_SNUM_1

  GOSUB @POP_RS: NAME$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = "NUMBER"
  R = A
  RETURN


@CARD_TO_BG_NUM '(NAME$:STRING): NUMBER
  R$ = "@CARD_TO_BG_NUM": ARGNUM = 1: GOSUB @ENTER

  R$ = NAME$: GOSUB @PUSH_RS

  NAME$ = STACK$[BP + 1]

  A$ = MID$(NAME$, 0, 1)
  A = VAL(MID$(NAME$, 1, 2))

  IF A$ == "A" THEN A = BGU1_NUM_OFFSET + A: GOTO @_CARD_TO_BNUM_E
  IF A == 1 THEN A = BGU1_ALP_OFFSET + 0: GOTO @_CARD_TO_BNUM_E
  IF A >= 11 THEN A = BGU1_ALP_OFFSET + A - 10: GOTO @_CARD_TO_BNUM_E
  A = BGU1_NUM_OFFSET + A

@_CARD_TO_BNUM_E

  GOSUB @POP_RS: NAME$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = "NUMBER"
  R = A
  RETURN


@CARD_TO_DCHR '(NAME$:STRING): STRING
  R$ = "@CARD_TO_DCHR": ARGNUM = 1: GOSUB @ENTER

  R$ = NAME$: GOSUB @PUSH_RS

  NAME$ = STACK$[BP + 1]

  A$ = MID$(NAME$, 0, 1)
  A = VAL(MID$(NAME$, 1, 2))
  R$ = STR$(A)


  IF A$ == "S" THEN A$ = MID$(SUIT_CHARS$, 0, 1)
  IF A$ == "D" THEN A$ = MID$(SUIT_CHARS$, 1, 1)
  IF A$ == "H" THEN A$ = MID$(SUIT_CHARS$, 2, 1)
  IF A$ == "C" THEN A$ = MID$(SUIT_CHARS$, 3, 1)
  IF A == 1 THEN R$ = "A"
  IF A == 11 THEN R$ = "J"
  IF A == 12 THEN R$ = "C"
  IF A == 13 THEN R$ = "Q"
  IF A == 14 THEN R$ = "K"
  A$ = A$ + R$

  GOSUB @POP_RS: NAME$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = "STRING"
  R$ = A$
  RETURN


@BOARD_TO_HXG '(NONE): STRING
  R$ = "@BOARD_TO_HXG": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R

  IF CUR_PURPOSE_DEG != 0 THEN @_BOARD_TO_HXG_1
  A = 0
  FOR I = 0 TO 6 - 1
   A = A + (VAL(MID$(CUR_BOARD$[I], 1, 2)) % 2) * NUM_TO_BIT[I]
  NEXT
  A$ = MSG_HXG$[A]
  GOTO @_BOARD_TO_HXG_E
@_BOARD_TO_HXG_1
  IF CUR_PURPOSE_DEG == 90 AND CUR_PURPOSE$ == "A00" THEN A$ = MSG_HXG$[64]
  IF CUR_PURPOSE_DEG == 90 AND CUR_PURPOSE$ == "A13" THEN A$ = MSG_HXG$[65]
  IF CUR_PURPOSE_DEG == 270 AND CUR_PURPOSE$ == "A00" THEN A$ = MSG_HXG$[66]
  IF CUR_PURPOSE_DEG == 270 AND CUR_PURPOSE$ == "A13" THEN A$ = MSG_HXG$[67]
@_BOARD_TO_HXG_E

  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RT$ = "STRING"
  R$ = A$
  RETURN


@DRAW_SRBN '(NONE): NONE
  R$ = "@DRAW_SRBN": ARGNUM = 0: GOSUB @ENTER
  R = I: GOSUB @PUSH_R

  GPUTCHR (SRBN_CX + 0) * 8, (SRBN_CY + 0) * 8, "BGU1", BGU1_SRBN_TL, 0, 1
  GPUTCHR (SRBN_CX + 13) * 8, (SRBN_CY + 0) * 8, "BGU1", BGU1_SRBN_TR, 0, 1
  GPUTCHR (SRBN_CX + 13) * 8, (SRBN_CY + 9) * 8, "BGU1", BGU1_SRBN_BR, 0, 1
  GPUTCHR (SRBN_CX + 0) * 8, (SRBN_CY + 9) * 8, "BGU1", BGU1_SRBN_BL, 0, 1
  FOR I = 0 TO 8 - 1
    GPUTCHR (SRBN_CX + 0) * 8, (SRBN_CY + 1 + I) * 8, "BGU1", BGU1_SRBN_L, 0, 1
  NEXT
  FOR I = 0 TO 8 - 1
    GPUTCHR (SRBN_CX + 13) * 8, (SRBN_CY + 1 + I) * 8, "BGU1", BGU1_SRBN_R, 0, 1
  NEXT
  FOR I = 0 TO 6 - 1
    GPUTCHR (SRBN_CX + I * 2+ 1) * 8, (SRBN_CY + 0) * 8, "BGU1", BGU1_SRBN_T, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 0) * 8, "BGU1", BGU1_SRBN_T, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 1) * 8, "BGU1", BGU1_SRBN_JIKUL, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 1) * 8, "BGU1", BGU1_SRBN_JIKUR, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 2) * 8, "BGU1", BGU1_SRBN_JIKUL, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 2) * 8, "BGU1", BGU1_SRBN_JIKUR, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 3) * 8, "BGU1", BGU1_SRBN_HARI, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 3) * 8, "BGU1", BGU1_SRBN_HARI, 0, 1
    IF I != 2 THEN @_DRAW_SRBN_1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8 + 4, (SRBN_CY + 3) * 8, "BGU1", BGU1_SRBN_TEN, 0, 1
@_DRAW_SRBN_1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 4) * 8, "BGU1", BGU1_SRBN_JIKUL, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 4) * 8, "BGU1", BGU1_SRBN_JIKUR, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 5) * 8, "BGU1", BGU1_SRBN_JIKUL, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 5) * 8, "BGU1", BGU1_SRBN_JIKUR, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 6) * 8, "BGU1", BGU1_SRBN_JIKUL, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 6) * 8, "BGU1", BGU1_SRBN_JIKUR, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 7) * 8, "BGU1", BGU1_SRBN_JIKUL, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 7) * 8, "BGU1", BGU1_SRBN_JIKUR, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 8) * 8, "BGU1", BGU1_SRBN_JIKUL, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 8) * 8, "BGU1", BGU1_SRBN_JIKUR, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 1) * 8, (SRBN_CY + 9) * 8, "BGU1", BGU1_SRBN_B, 0, 1
    GPUTCHR (SRBN_CX + I * 2 + 2) * 8, (SRBN_CY + 9) * 8, "BGU1", BGU1_SRBN_B, 0, 1
  NEXT

  GOSUB @POP_R: I = R
  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_SRBN_TAMA '(NONE): NONE
  R$ = "@DRAW_SRBN_TAMA": ARGNUM = 0: GOSUB @ENTER
  R = I: GOSUB @PUSH_R
  R = LC: GOSUB @PUSH_R
  R = RC: GOSUB @PUSH_R

  FOR I = 0 TO 6 - 1
   IF I == 0 THEN A = FLOOR(CUR_SOROBAN_L / 100)
   IF I == 1 THEN A = FLOOR((CUR_SOROBAN_L % 100)/ 10)
   IF I == 2 THEN A = CUR_SOROBAN_L % 10
   IF I == 3 THEN A = FLOOR(CUR_SOROBAN_R / 100)
   IF I == 4 THEN A = FLOOR((CUR_SOROBAN_R % 100)/ 10)
   IF I == 5 THEN A = CUR_SOROBAN_R % 10
   LC = BGU1_SRBN_TAMAL + 256: RC = BGU1_SRBN_TAMAR + 256
   IF A >= 5 THEN LC = 0: RC = 0
   BGPUT 0, SRBN_CX + 1 + I * 2, SRBN_CY + 0 + 1, LC, 0, 0, 0
   BGPUT 0, SRBN_CX + 2 + I * 2, SRBN_CY + 0 + 1, RC, 0, 0, 0
   LC = 0: RC = 0
   IF A >= 5 THEN A = A - 5: LC = BGU1_SRBN_TAMAL + 256: RC = BGU1_SRBN_TAMAR + 256
   BGPUT 0, SRBN_CX + 1 + I * 2, SRBN_CY + 1 + 1, LC, 0, 0, 0
   BGPUT 0, SRBN_CX + 2 + I * 2, SRBN_CY + 1 + 1, RC, 0, 0, 0
   LC = BGU1_SRBN_TAMAL + 256: RC = BGU1_SRBN_TAMAR + 256
   IF A == 0 THEN LC = 0: RC = 0
   BGPUT 0, SRBN_CX + 1 + I * 2, SRBN_CY + 3 + 1, LC, 0, 0, 0
   BGPUT 0, SRBN_CX + 2 + I * 2, SRBN_CY + 3 + 1, RC, 0, 0, 0
   LC = BGU1_SRBN_TAMAL + 256: RC = BGU1_SRBN_TAMAR + 256
   IF A == 1 THEN LC = 0: RC = 0
   BGPUT 0, SRBN_CX + 1 + I * 2, SRBN_CY + 4 + 1, LC, 0, 0, 0
   BGPUT 0, SRBN_CX + 2 + I * 2, SRBN_CY + 4 + 1, RC, 0, 0, 0
   LC = BGU1_SRBN_TAMAL + 256: RC = BGU1_SRBN_TAMAR + 256
   IF A == 2 THEN LC = 0: RC = 0
   BGPUT 0, SRBN_CX + 1 + I * 2, SRBN_CY + 5 + 1, LC, 0, 0, 0
   BGPUT 0, SRBN_CX + 2 + I * 2, SRBN_CY + 5 + 1, RC, 0, 0, 0
   LC = BGU1_SRBN_TAMAL + 256: RC = BGU1_SRBN_TAMAR + 256
   IF A == 3 THEN LC = 0: RC = 0
   BGPUT 0, SRBN_CX + 1 + I * 2, SRBN_CY + 6 + 1, LC, 0, 0, 0
   BGPUT 0, SRBN_CX + 2 + I * 2, SRBN_CY + 6 + 1, RC, 0, 0, 0
   LC = BGU1_SRBN_TAMAL + 256: RC = BGU1_SRBN_TAMAR + 256
   IF A == 4 THEN LC = 0: RC = 0
   BGPUT 0, SRBN_CX + 1 + I * 2, SRBN_CY + 7 + 1, LC, 0, 0, 0
   BGPUT 0, SRBN_CX + 2 + I * 2, SRBN_CY + 7 + 1, RC, 0, 0, 0
  NEXT

  GOSUB @POP_R: RC = R
  GOSUB @POP_R: LC = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_LOGO '(NONE): NONE
  R$ = "@DRAW_LOGO": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R

  CON_COL[0] = 0

  W = 32
  A$ = GRP_FILE_T$
  LOAD "GRP" + STR$(D_GPAGE) + ":" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR_FST

  FOR I = 0 TO LEN(LOGO_STR_JA$) - 1
    R = 0: GOSUB @PUSH_R
    R =  5 + FLOOR(W / FONT_WIDTH): GOSUB @PUSH_R
    R = 2 + I * 2: GOSUB @PUSH_R
    R$ = MID$(LOGO_STR_JA$, I, 1): GOSUB @PUSH_RS
    R$ = "": GOSUB @PUSH_RS
    GOSUB @CON_PRINT
  NEXT

  R = 0: GOSUB @PUSH_R
  R = 5 + FLOOR(W / FONT_WIDTH): GOSUB @PUSH_R
  R = CON_HEIGHT - 9 + 1: GOSUB @PUSH_R
  R$ = LOGO_STR_EN$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  R = 0: GOSUB @PUSH_R
  R = 5 + FLOOR(W / FONT_WIDTH): GOSUB @PUSH_R
  R = CON_HEIGHT - 9 + 3: GOSUB @PUSH_R
  R$ = " " + LOGO_SUB_STR$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  IF YOUSCOUT_VER$ == "" THEN A$ = "PTC" ELSE A$ = "PTC Ver." + YOUSCOUT_VER$
  R = 0: GOSUB @PUSH_R
  R = 5 + FLOOR(W / FONT_WIDTH): GOSUB @PUSH_R
  R = CON_HEIGHT - 9 + 5: GOSUB @PUSH_R
  R$ = "  " + A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  CON_COL[0] = COL_BLACK

  GOSUB @POP_R: W = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


'I: number the first card as 0th.
@NTH_CD_XY '(I:NUMBER, CDS$:STRING, ANCHOR$:STRING)
  R$ = "@NTH_CD_XY": ARGNUM = 3: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R$ = CDS$: GOSUB @PUSH_RS
  R$ = ANCHOR$: GOSUB @PUSH_RS
  R = N: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R

  I = VAL(STACK$[BP + 1])
  CDS$ = STACK$[BP + 2]
  ANCHOR$ = STACK$[BP + 3]

  N = FLOOR((LEN(CDS$) + 1) / 4)

  IF N == 0 OR I >= N THEN X = -1: Y = -1: GOTO @_NTH_CD_XY_E
  IF N > 5 THEN @_NTH_CD_XY_F

  X = (N - I - 1) * 8
  Y = 0
  A$ = ANCHOR$
  R$ = ""
  IF MID$(A$,0,1)=="S" OR MID$(A$,0,1)=="N" THEN R$=MID$(A$,0,1): A$=MID$(A$,1,LEN(A$)-1)
  A = (5 - N) * 8 / 2
  IF A$ == "W" THEN A = 0
  IF A$ == "E" THEN A = (5 - N) * 8
  R = 8
  IF R$ == "N" THEN R = 0
  IF R$ == "S" THEN R = 2 * 8
  X = X + A
  Y = Y + R
  GOTO @_NTH_CD_XY_E

@_NTH_CD_XY_F
  A = N - 5
  IF N > 10 THEN A = N - 10
  IF I < A THEN X = (5 - I - 1) * 8: Y = (1 + (N > 10)) * 8
  IF I >= A AND I < A + 5 THEN X = (5 - (I - A) - 1) * 8: Y = (0 + (N > 10)) * 8
  IF I >= A + 5 THEN X = (5 - (I - A - 5) - 1) * 8: Y = 0

  IF MID$(ANCHOR$, 0, 1) == "S" AND N <= 10 THEN Y = Y + 8

@_NTH_CD_XY_E  

  RR$[0] = STR$(X)
  RR$[1] = STR$(Y)

  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: N = R
  GOSUB @POP_RS: ANCHOR$ = R$
  GOSUB @POP_RS: CDS$ = R$
  GOSUB @POP_R: I = R

  ARGNUM = 3: GOSUB @LEAVE
  RN = 2
  RT$ = "ARRAY"
  RETURN


@LOAD_MISC '(NONE): NONE
  R$ = "@LOAD_MISC": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R

  GOSUB @SPPAGE_L
  SPSET SP_CURSOR, SPS_CURSOR, 0, 0, 0, 0, 16, 16
  SPHOME SP_CURSOR, SP_CURSOR_HOME_X, SP_CURSOR_HOME_Y
  SPOFS SP_CURSOR, -1024, -1024

  GOSUB @SPPAGE_U
  RESTORE PM_TOKEN$ + "_PL"
  FOR I = 0 TO 16 - 1
    READ A$
    IF A$ == "" THEN @_LOAD_MISC_PL_1
    COLSET "SP", SPPL_TOKEN * 16 + I, A$
@_LOAD_MISC_PL_1
  NEXT

  RESTORE PM_B00$ + "_PL"
  FOR I = 0 TO 16 - 1
    READ A$
    IF A$ == "" THEN @_LOAD_MISC_PL_2
    COLSET "SP", SPPL_B00 * 16 + I, A$
    GOSUB @BGPAGE_U
    COLSET "BG", BGPL_B00 * 16 + I, A$
    GOSUB @BGPAGE_L
    COLSET "BG", BGPL_B00 * 16 + I, A$
@_LOAD_MISC_PL_2
  NEXT

  RESTORE PM_DISCARDED$ + "_PL"
  FOR I = 0 TO 16 - 1
    READ A$
    IF A$ == "" THEN @_LOAD_MISC_PL_3
    COLSET "SP", SPPL_DISCARDED * 16 + I, A$
    GOSUB @BGPAGE_U
    COLSET "BG", BGPL_DISCARDED * 16 + I, A$
    GOSUB @BGPAGE_L
    COLSET "BG", BGPL_DISCARDED * 16 + I, A$
@_LOAD_MISC_PL_3
  NEXT

  RESTORE PM_A00$ + "_PL"
  FOR I = 0 TO 16 - 1
    READ A$
    IF A$ == "" THEN @_LOAD_MISC_PL_4
    COLSET "SP", SPPL_A00 * 16 + I, A$
@_LOAD_MISC_PL_4
  NEXT

  RESTORE PM_A13$ + "_PL"
  FOR I = 0 TO 16 - 1
    READ A$
    IF A$ == "" THEN @_LOAD_MISC_PL_5
    COLSET "SP", SPPL_A13 * 16 + I, A$
@_LOAD_MISC_PL_5
  NEXT

  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@RELOAD_SPRITE '(NONE): NONE
  R$ = "@RELOAD_SPRITE": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_B00 / 4)
  RR$[SPR_PL] = STR$(SPPL_B00)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(CARD_WIDTH)
  RR$[SPR_H] = STR$(CARD_HEIGHT)
  RR$[SPR_ANGLE] = STR$(180 * ST_UREV)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(CARD_HW)
  RR$[SPR_HOME_Y] = STR$(CARD_HH)
  R = SP_B00: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_A00 / 4)
  RR$[SPR_PL] = STR$(SPPL_A00)
  RR$[SPR_DEPTH] = STR$(3)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(CARD_WIDTH)
  RR$[SPR_H] = STR$(CARD_HEIGHT)
  RR$[SPR_ANGLE] = STR$(180 * ST_UREV)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = "0"
  RR$[SPR_HOME_Y] = "0"
  R = SP_A00: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_A13 / 4)
  RR$[SPR_PL] = STR$(SPPL_A13)
  RR$[SPR_DEPTH] = STR$(3)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(CARD_WIDTH)
  RR$[SPR_H] = STR$(CARD_HEIGHT)
  RR$[SPR_ANGLE] = STR$(180 * ST_UREV)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = "0"
  RR$[SPR_HOME_Y] = "0"
  R = SP_A13: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_TOKEN / 4)
  RR$[SPR_PL] = STR$(SPPL_TOKEN)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(PM_TOKEN_W)
  RR$[SPR_H] = STR$(PM_TOKEN_H)
  RR$[SPR_ANGLE] = STR$(180 * ST_UREV)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(PM_TOKEN_W / 2))
  RR$[SPR_HOME_Y] = STR$(FLOOR(PM_TOKEN_H / 2))
  R = SP_TOKEN: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_RDLN_TL / 4)
  RR$[SPR_PL] = STR$(0)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(32)
  RR$[SPR_H] = STR$(32)
  RR$[SPR_ANGLE] = STR$(0)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(32 / 2))
  RR$[SPR_HOME_Y] = STR$(FLOOR(32 / 2))
  R = SP_RDLN_TL: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_RDLN_TL / 4)
  RR$[SPR_PL] = STR$(0)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(32)
  RR$[SPR_H] = STR$(32)
  RR$[SPR_ANGLE] = STR$(90)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(32 / 2))
  RR$[SPR_HOME_Y] = STR$(FLOOR(32 / 2))
  R = SP_RDLN_TR: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_RDLN_TL / 4)
  RR$[SPR_PL] = STR$(0)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(32)
  RR$[SPR_H] = STR$(32)
  RR$[SPR_ANGLE] = STR$(180)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(32 / 2))
  RR$[SPR_HOME_Y] = STR$(FLOOR(32 / 2))
  R = SP_RDLN_BR: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_RDLN_TL / 4)
  RR$[SPR_PL] = STR$(0)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(32)
  RR$[SPR_H] = STR$(32)
  RR$[SPR_ANGLE] = STR$(270)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(32 / 2))
  RR$[SPR_HOME_Y] = STR$(FLOOR(32 / 2))
  R = SP_RDLN_BL: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_RDLN_T / 4)
  RR$[SPR_PL] = STR$(0)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(32)
  RR$[SPR_H] = STR$(8)
  RR$[SPR_ANGLE] = STR$(0)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(32 / 2))
  RR$[SPR_HOME_Y] = STR$(0)
  R = SP_RDLN_T: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_RDLN_T / 4)
  RR$[SPR_PL] = STR$(0)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(32)
  RR$[SPR_H] = STR$(8)
  RR$[SPR_ANGLE] = STR$(90)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(32 / 2))
  RR$[SPR_HOME_Y] = STR$(0)
  R = SP_RDLN_R: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_RDLN_T / 4)
  RR$[SPR_PL] = STR$(0)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(32)
  RR$[SPR_H] = STR$(8)
  RR$[SPR_ANGLE] = STR$(180)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(32 / 2))
  RR$[SPR_HOME_Y] = STR$(0)
  R = SP_RDLN_B: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  RN = SPR_INIT_N
  FOR I = 0 TO RN - 1
   RR$[I] = ""
  NEXT
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(7 * 64 + SPU7_RDLN_T / 4)
  RR$[SPR_PL] = STR$(0)
  RR$[SPR_DEPTH] = STR$(2)
  RR$[SPR_X] = STR$(-1024)
  RR$[SPR_Y] = STR$(-1024)
  RR$[SPR_W] = STR$(32)
  RR$[SPR_H] = STR$(8)
  RR$[SPR_ANGLE] = STR$(270)
  RR$[SPR_SCALE] = STR$(100)
  RR$[SPR_HOME_X] = STR$(FLOOR(32 / 2))
  RR$[SPR_HOME_Y] = STR$(0)
  R = SP_RDLN_L: GOSUB @PUSH_R
  GOSUB @SP_INIT_RR

  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@SP_INIT_RR '(NUM: NUMBER) with (RR): NONE
  R$ = "@SP_INIT_RR": ARGNUM = 1: GOSUB @ENTER

  R = NUM: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R

  NUM = VAL(STACK$[BP + 1])

  W = VAL(RR$[SPR_W])
  H = VAL(RR$[SPR_H])

  W = (FLOOR(W / 8) + !!(W % 8)) * 8
  H = (FLOOR(H / 8) + !!(H % 8)) * 8

  IF W > 16 AND W < 32 THEN W = 32
  IF W > 32 AND W < 64 THEN W = 64
  IF H > 16 AND H < 32 THEN H = 32
  IF H > 32 AND H < 64 THEN H = 64
  IF W == 64 AND H < 32 THEN H = 32
  IF W < 32 AND H == 64 THEN W = 32

  RR$[SPR_W] = STR$(W)
  RR$[SPR_H] = STR$(H)
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[NUM] = R$

  SPSET NUM,VAL(RR$[SPR_CHR]),VAL(RR$[SPR_PL]),0,0,VAL(RR$[SPR_DEPTH]),W,H
  SPHOME NUM, VAL(RR$[SPR_HOME_X]), VAL(RR$[SPR_HOME_Y])
  SPOFS NUM, VAL(RR$[SPR_X]), VAL(RR$[SPR_Y])
  IF VAL(RR$[SPR_ANGLE]) != 0 THEN SPANGLE NUM, VAL(RR$[SPR_ANGLE])
  IF VAL(RR$[SPR_SCALE]) != 100 THEN SPSCALE NUM, VAL(RR$[SPR_SCALE])

  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: NUM = R

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = "ARRAY"
  RETURN


@CARD_TO_SCORE '(CD$: STRING): NUMBER
  R$ = "@CARD_TO_SCORE": ARGNUM = 1: GOSUB @ENTER

  R$ = CD$: GOSUB @PUSH_RS

  CD$ = STACK$[BP + 1]

  IF MID$(CD$, 0, 1) == "A" THEN @_CD_TO_SC_A
  A = VAL(MID$(CD$, 1, 2))
  IF A <= 10 GOTO @_CD_TO_SC_E
  IF ST_COURT_CD$ == "K14" GOTO @_CD_TO_SC_E
  IF ST_COURT_CD$ != "K10" GOTO @_CD_TO_SC_NK0
  IF A >= 11 THEN A = 10
  GOTO @_CD_TO_SC_E
@_CD_TO_SC_NK0
  IF ST_COURT_CD$ != "K13a" GOTO @_CD_TO_SC_NK1
  IF A >= 13 THEN A = A - 1
  GOTO @_CD_TO_SC_E
@_CD_TO_SC_NK1
  IF ST_COURT_CD$ != "K13b" GOTO @_CD_TO_SC_NK2
  IF A >= 12 THEN A = A - 1
  GOTO @_CD_TO_SC_E
@_CD_TO_SC_NK2
  PRINT "CARD_TO_SCORE: " + ST_COURT_CD$ + " is wrong!"
  STOP: RETURN

 @_CD_TO_SC_A
  A$ = MID$(CD$, 5, 2)
  A = -1
  IF A$ == "♠/" THEN A = 0
  IF A$ == "/♠" THEN A = 1
  IF A$ == "♦/" THEN A = 2
  IF A$ == "/♦" THEN A = 3
  IF A$ == "♥/" THEN A = 4
  IF A$ == "/♥" THEN A = 5
  IF A$ == "♣/" THEN A = 6
  IF A$ == "/♣" THEN A = 7
  IF A == -1 THEN @_CD_TO_SC_ERR

  A$ = MID$(CD$, 3, 1)
  IF A$ == "R" THEN A = FLOOR(A / 2) * 2 + !(A % 2)
  R$ = TABLE_MAJOR$[VAL(MID$(CD$, 1, 2))]
  GOSUB @PUSH_RS
  GOSUB @POP_RR
  A = VAL(RR$[A]) * ST_MA_INF
  A = FLOOR(A) + !!(A - FLOOR(A))

@_CD_TO_SC_E
  GOSUB @POP_RS: CD$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = "NUMBER"
  R = A
  RETURN

@_CD_TO_SC_ERR
  PRINT "CARD_TO_SCORE: Parse Error!"
  STOP: RETURN


@SPLIT_EXP_ADD_R '(EXP$: STRING): ARRAY
  R$ = "@SPLIT_EXP_ADD_R": ARGNUM = 1: GOSUB @ENTER

  R$ = EXP$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R

  EXP$ = STACK$[BP + 1]

  I = 0
  RN = 0
@_S_EXP_A_LP
  J = INSTR(I, EXP$, "+")
  IF J == -1 THEN @_S_EXP_A_E
  RR$[RN] = MID$(EXP$, I, J - I)
  I = J + 1
  RN = RN + 1
  GOTO @_S_EXP_A_LP
@_S_EXP_A_E
  RR$[RN] = MID$(EXP$, I, LEN(EXP$) - I)
  RN = RN + 1

  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: EXP$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = "ARRAY"
  RETURN


@SPLIT_EXP_POS_R '(EXP$: STRING): ARRAY
  R$ = "@SPLIT_EXP_POS_R": ARGNUM = 1: GOSUB @ENTER

  R$ = EXP$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R

  EXP$ = STACK$[BP + 1]

  A$ = "Min("
  IF MID$(EXP$, 0, LEN(A$)) == A$ THEN EXP$ = MID$(EXP$, LEN(A$), LEN(EXP$) - LEN(A$) - 1)
  A$ = "Suitable("
  IF MID$(EXP$, 0, LEN(A$)) == A$ THEN EXP$ = MID$(EXP$, LEN(A$), LEN(EXP$) - LEN(A$) - 1)
  A$ = "Max("
  IF MID$(EXP$, 0, LEN(A$)) == A$ THEN EXP$ = MID$(EXP$, LEN(A$), LEN(EXP$) - LEN(A$) - 1)
  A$ = "Sum("
  IF MID$(EXP$, 0, LEN(A$)) == A$ THEN EXP$ = MID$(EXP$, LEN(A$), LEN(EXP$) - LEN(A$) - 1)

  RR$[2] = ""
  I = INSTR(0, EXP$, "!")
  IF I != -1 THEN RR$[2] = "!"
  I = INSTR(0, EXP$, "[")
  J = INSTR(0, EXP$, "]")
  IF I != -1 AND J != -1 THEN RR$[2] = MID$(EXP$, I + 1, J - (I + 1))

  I = INSTR(0, EXP$, "(")
  IF I == -1 THEN I = 0 ELSE I = I + 1
  A$ = MID$(EXP$, I, 1)
  RR$[1] = MID$(EXP$, I + 1, 1)
  IF A$ == "$" THEN RR$[0] = "": GOTO @_S_EXP_P_E
  A = CUR_TOKEN
  IF A$ == "↑" AND A >= 3 THEN RR$[0] = "7": GOTO @_S_EXP_P_E
  IF A$ == "↓" AND A < 3 THEN RR$[0] = "6": GOTO @_S_EXP_P_E
  IF A$ == "→" THEN A = A - 1
  IF A$ == "←" THEN A = A + 1
  IF A$ == "↑" THEN A = A + 3
  IF A$ == "↓" THEN A = A - 3
  IF A == -1 THEN A = 5
  IF A == 6 THEN A = 0
  IF RR$[1] != "A" AND A >= 3 AND CARDS_TYPE_U$ != RR$[1] THEN RR$[0] = "7": GOTO @_S_EXP_P_E
  IF RR$[1] != "A" AND A < 3 AND CARDS_TYPE_L$ != RR$[1] THEN RR$[0] = "6": GOTO @_S_EXP_P_E
  RR$[0] = STR$(A)
  GOTO @_S_EXP_P_E

@_S_EXP_P_E
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: EXP$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = "ARRAY"
  RN = 3
  RETURN


@REDUCE_EXP_CDS_R '(EXP$: STRING): ARRAY
  R$ = "@REDUCE_EXP_CDS_R": ARGNUM = 1: GOSUB @ENTER

  R$ = EXP$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = N: GOSUB @PUSH_R
  FOR I = 0 TO 15 - 1
    RR$[I] = CARD$[I]
  NEXT
  RN = 15
  GOSUB @PUSH_RR

  EXP$ = STACK$[BP + 1]

  I = INSTR(0, EXP$, "Suitable(")
  IF I == -1 THEN @_R_EXP_C_NS
  A = CUR_SUITABLE$ == "" OR CUR_SUITABLE$ == "NONE"
  A = A OR CUR_SUITABLE$ == "IGNORED" 
  IF A THEN @_R_EXP_C_EN
  A = 1
  A$ = MID$(CUR_SUITABLE$, 0, 3)
  IF MID$(EXP$, 0, 4) == "Max(" THEN A$ = MID$(CUR_SUITABLE$, 8, 3)
  IF MID$(EXP$, 0, 4) == "Min(" THEN A$ = MID$(CUR_SUITABLE$, 4, 3)
  TMP$[0, 0] = A$
  GOTO @_R_EXP_C_E

@_R_EXP_C_NS
  I = INSTR(0, EXP$, "Max(")
  IF I == -1 THEN @_R_EXP_C_NM
  I = I + LEN("Max(")
  R$ = MID$(EXP$, I, LEN(EXP$) - I - 1): GOSUB @PUSH_RS
  GOSUB @REDUCE_EXP_CDS_R
  IF RT$ == "NONE" THEN @_R_EXP_C_EN
  IF RN == 0 THEN A = 0: GOTO @_R_EXP_C_E
  FOR I = 0 TO RN - 1
   CARD$[I] = RR$[I]
  NEXT
  N = RN
  J = -1
  FOR I = 0 TO N - 1
    R$ = CARD$[I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_SCORE
    IF J == -1 OR R > J THEN J = R: CARD$[N] = CARD$[I]
  NEXT
  A = 1
  TMP$[0, 0] = CARD$[N]
  GOTO @_R_EXP_C_E

@_R_EXP_C_NM
  I = INSTR(0, EXP$, "Sum(")
  IF I == -1 THEN @_R_EXP_C_NM1
  I = I + LEN("Sum(")
  EXP$ = MID$(EXP$, I, LEN(EXP$) - I - 1)
@_R_EXP_C_NM1
  R$ = EXP$: GOSUB @PUSH_RS
  GOSUB @SPLIT_EXP_POS_R
  IF RR$[1] != "A" THEN @_R_EXP_C_NA
  CARD$[0] = RR$[0]
  CARD$[1] = RR$[1]
  CARD$[2] = RR$[2]
  CARD$[1] = CUR_BOARD$[VAL(CARD$[0])]
  TMP$[0, 0] = CARD$[1] + "[" + CARD$[2] + "]"
  A = 1
  GOTO @_R_EXP_C_E
@_R_EXP_C_NA
  IF RR$[0] == "" THEN A = 1: TMP$[0, 0] = CUR_DRAWN$: GOTO @_R_EXP_C_E
  R$ = CUR_CARDS$[VAL(RR$[0])]
  IF R$ == "" AND RR$[2] == "!" THEN @_R_EXP_C_EN
  GOSUB @PUSH_RS
  GOSUB @POP_RR
  IF RN == 0 THEN A = 0: GOTO @_R_EXP_C_E
  A = RN
  FOR I = 0 TO RN - 1
    TMP$[I, 0] = RR$[I]
  NEXT
  GOTO @_R_EXP_C_E

@_R_EXP_C_EN
  A$ = "NONE"
  A = 0
  GOTO @_R_EXP_C_E1
@_R_EXP_C_E
  A$ = "ARRAY"
@_R_EXP_C_E1

  GOSUB @POP_RR
  FOR I = 0 TO RN - 1
    CARD$[I] = RR$[I]
  NEXT
  IF A == 0 THEN @_R_EXP_C_E2
  FOR I = 0 TO A - 1
    RR$[I] = TMP$[I, 0]
  NEXT
 @_R_EXP_C_E2
  RN = A
  GOSUB @POP_R: N = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: EXP$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = A$
  RETURN


@REDUCE_EXP_NUM '(EXP$: STRING): NUMBER
  R$ = "@REDUCE_EXP_NUM": ARGNUM = 1: GOSUB @ENTER

  R$ = EXP$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = N: GOSUB @PUSH_R
  R = MIN_SC: GOSUB @PUSH_R
  R$ = MIN_CD$: GOSUB @PUSH_RS
  R = MAX_SC: GOSUB @PUSH_R
  R$ = MAX_CD$: GOSUB @PUSH_RS
  FOR I = 0 TO 14 - 1
    RR$[I] = CARD$[I]
  NEXT
  RN = 14
  GOSUB @PUSH_RR

  EXP$ = STACK$[BP + 1]

  IF CUR_SUITABLE$ != "" THEN @_R_EXP_N_NS
  I = INSTR(0, EXP$, "Suitable(")
  IF I == -1 THEN CUR_SUITABLE$ = "IGNORED": GOTO @_R_EXP_N_NS
  I = I + LEN("Suitable(")
  J = INSTR(I, EXP$, ")")
  IF J == -1 THEN @_R_EXP_N_ERR
  R$ = MID$(EXP$, I, J - I): GOSUB @PUSH_RS
  GOSUB @REDUCE_EXP_CDS_R
  IF RN == 0 THEN @_R_EXP_N_EN
  J = INSTR(0, EXP$, ">")
  J = (J < I)
  FOR I = 0 TO RN - 1
    CARD$[I] = RR$[I]
  NEXT
  N = RN
  MIN_SC = -1
  MAX_SC = -1
  FOR I = 0 TO N - 1
    CUR_SUITABLE$ = CARD$[I]+","+CARD$[I]+","+CARD$[I]
    R$ = EXP$: GOSUB @PUSH_RS
    GOSUB @REDUCE_EXP_NUM
    IF RT$ == "NONE" OR R == 0 THEN @_R_EXP_N_S1
    R$ = CARD$[I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_SCORE
    IF MIN_SC == -1 OR R < MIN_SC THEN MIN_SC = R: MIN_CD$ = CARD$[I]
    IF MAX_SC == -1 OR R > MAX_SC THEN MAX_SC = R: MAX_CD$ = CARD$[I]
@_R_EXP_N_S1
  NEXT
  IF MIN_SC != -1 AND J THEN CUR_SUITABLE$ = MIN_CD$+","+MIN_CD$+","+MAX_CD$
  IF MIN_SC != -1 AND !J THEN CUR_SUITABLE$ = MAX_CD$+","+MIN_CD$+","+MAX_CD$
  IF MIN_SC == -1 THEN CUR_SUITABLE$ = "NONE"
  IF MIN_SC == -1 THEN A = 0 ELSE A = 1
  GOTO @_R_EXP_N_E

@_R_EXP_N_NS
  I = INSTR(0, EXP$, ">")
  IF I == -1 THEN @_R_EXP_N_NC
  IF CUR_EXP_L$ != "" THEN @_R_EXP_N_NS1
  R$ = MID$(EXP$, 0, I): GOSUB @PUSH_RS
  GOSUB @SPLIT_EXP_ADD_R
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  CUR_EXP_L$ = R$
  R$ = MID$(EXP$, I + 1, LEN(EXP$) - I - 1): GOSUB @PUSH_RS
  GOSUB @SPLIT_EXP_ADD_R
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  CUR_EXP_R$ = R$

@_R_EXP_N_NS1
  J = 0
  R$ = CUR_EXP_L$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  FOR I = 0 TO RN - 1
    CARD$[I] = RR$[I]
  NEXT
  N = RN
  I = 0
@_R_EXP_N_NS2
  R$ = CARD$[I]: GOSUB @PUSH_RS
  GOSUB @REDUCE_EXP_NUM
  IF RT$ == "NONE" THEN @_R_EXP_N_EN
  J = J + R
  I = I + 1
  IF I < N THEN @_R_EXP_N_NS2

  R$ = CUR_EXP_R$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  FOR I = 0 TO RN - 1
    CARD$[I] = RR$[I]
  NEXT
  N = RN
  I = 0
@_R_EXP_N_NS3
  R$ = CARD$[I]: GOSUB @PUSH_RS
  GOSUB @REDUCE_EXP_NUM
  IF RT$ == "NONE" THEN @_R_EXP_N_EN
  J = J - R
  I = I + 1
  IF I < N THEN @_R_EXP_N_NS3

  A = (J > 0)
  GOTO @_R_EXP_N_E

@_R_EXP_N_NC
  R$ = EXP$: GOSUB @PUSH_RS
  GOSUB @REDUCE_EXP_CDS_R
  IF RT$ == "NONE" THEN @_R_EXP_N_EN
  IF RN == 0 THEN A = 0: GOTO @_R_EXP_N_E
  FOR I = 0 TO RN - 1
    CARD$[I] = RR$[I]
  NEXT
  N = RN
  J = 0
  FOR I = 0 TO N - 1
    R$ = CARD$[I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_SCORE
    J = J + R
  NEXT
  A = J
  GOTO @_R_EXP_N_E

@_R_EXP_N_EN
  A$ = "NONE"
  GOTO @_R_EXP_N_E1
@_R_EXP_N_E
  A$ = "NUMBER"
@_R_EXP_N_E1

  GOSUB @POP_RR
  FOR I = 0 TO RN - 1
    CARD$[I] = RR$[I]
  NEXT
  GOSUB @POP_RS: MAX_CD$ = R$
  GOSUB @POP_R: MAX_SC = R
  GOSUB @POP_RS: MIN_CD$ = R$
  GOSUB @POP_R: MIN_SC = R
  GOSUB @POP_R: N = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: EXP$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RT$ = A$
  R = A
  RETURN

@_R_EXP_N_ERR
  PRINT "REDUCE_EXP_NUM: Parse Error!"
  STOP: RETURN


'36 <= W <= 96, 36 <= H <= 80
@DRAW_RDLN '(X:NUMBER, Y:NUMBER, W:NUMBER, H:NUMBER): NONE
  R$ = "@DRAW_RDLN": ARGNUM = 4: GOSUB @ENTER

  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R

  X = VAL(STACK$[BP + 1])
  Y = VAL(STACK$[BP + 2])
  W = VAL(STACK$[BP + 3])
  H = VAL(STACK$[BP + 4])

  R = SP_PAGE: GOSUB @PUSH_R: GOSUB @SPPAGE_U
  SPOFS SP_RDLN_TL, X + 16, Y + 16
  SPOFS SP_RDLN_TR, X + W - 16 - 1, Y + 16
  SPOFS SP_RDLN_BR, X + W - 16 - 1, Y + H - 16 - 1
  SPOFS SP_RDLN_BL, X + 16, Y + H - 16 - 1

  SPOFS SP_RDLN_T, X + FLOOR(W / 2), Y
  SPOFS SP_RDLN_L, X, Y + FLOOR(H / 2)
  SPOFS SP_RDLN_B, X + FLOOR(W / 2) - 1, Y + H - 1
  SPOFS SP_RDLN_R, X + W - 1, Y + FLOOR(H / 2)
  GOSUB @POP_R: SP_PAGE = R: SPPAGE SP_PAGE

  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R

  ARGNUM = 4: GOSUB @LEAVE
  RETURN


@OMIT_RDLN '(NONE): NONE
  R$ = "@OMIT_RDLN": ARGNUM = 0: GOSUB @ENTER

  A = SP_PAGE: GOSUB @SPPAGE_U
  SPOFS SP_RDLN_TL, -1024, -1024
  SPOFS SP_RDLN_TR, -1024, -1024
  SPOFS SP_RDLN_BR, -1024, -1024
  SPOFS SP_RDLN_BL, -1024, -1024

  SPOFS SP_RDLN_T, -1024, -1024
  SPOFS SP_RDLN_L, -1024, -1024
  SPOFS SP_RDLN_B, -1024, -1024
  SPOFS SP_RDLN_R, -1024, -1024
  SP_PAGE = A: SPPAGE A

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_MINI_CDS1 '(NONE): NONE
  R$ = "@DRAW_MINI_CDS1": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R

  IF ! ST_UREV THEN @_DRAW_MINI_CDS1N
  FOR I = 0 TO 6 - 1 + 1
    X = MINI_CD_X[I]
    Y = MINI_CD_Y[I]
    IF I == 6 THEN X = MINI_CD_X[8]: Y = MINI_CD_Y[8]
    X = MINI_CDS_W - 1 - X
    Y = MINI_CDS_H - 1 - Y
    X = X + MINI_CDS_X - MINI_CD_W + 1
    Y = Y + MINI_CDS_Y - MINI_CD_H + 1
    GFILL X, Y, X + MINI_CD_W - 1, Y + MINI_CD_H - 1, COL_WHITE
    GBOX X, Y, X + MINI_CD_W - 1, Y + MINI_CD_H - 1, COL_GREY
  NEXT
  GOTO @_DRAW_MINI_CDS1E
  
@_DRAW_MINI_CDS1N
  FOR I = 0 TO 6 - 1 + 1
    X = MINI_CD_X[I]
    Y = MINI_CD_Y[I]
    IF I == 6 THEN X = MINI_CD_X[8]: Y = MINI_CD_Y[8]
    X = X + MINI_CDS_X
    Y = Y + MINI_CDS_Y
    GFILL X, Y, X + MINI_CD_W - 1, Y + MINI_CD_H - 1, COL_WHITE
    GBOX X, Y, X + MINI_CD_W - 1, Y + MINI_CD_H - 1, COL_GREY
  NEXT
@_DRAW_MINI_CDS1E

  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_MINI_CDS2 '(NONE): NONE
  R$ = "@DRAW_MINI_CDS2": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R

  IF ! ST_UREV THEN @_DRAW_MINI_CDS2N
  FOR I = 6 TO 7
    X = MINI_CD_X[I]
    Y = MINI_CD_Y[I]
    X = MINI_CDS_W - 1 - X
    Y = MINI_CDS_H - 1 - Y
    X = X + MINI_CDS_X - MINI_CD_W + 1
    Y = Y + MINI_CDS_Y - MINI_CD_H + 1
    GFILL X, Y, X + MINI_CD_W - 1, Y + MINI_CD_H - 1, COL_WHITE
    GBOX X, Y, X + MINI_CD_W - 1, Y + MINI_CD_H - 1, COL_GREY
  NEXT
  GOTO @_DRAW_MINI_CDS2E
  
@_DRAW_MINI_CDS2N
  FOR I = 6 TO 7
    X = MINI_CD_X[I]
    Y = MINI_CD_Y[I]
    X = X + MINI_CDS_X
    Y = Y + MINI_CDS_Y
    GFILL X, Y, X + MINI_CD_W - 1, Y + MINI_CD_H - 1, COL_WHITE
    GBOX X, Y, X + MINI_CD_W - 1, Y + MINI_CD_H - 1, COL_GREY
  NEXT
@_DRAW_MINI_CDS2E

  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_MAIN_PNL '(NONE): NONE
  R$ = "@DRAW_MAIN_PNL": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R

  GOSUB @DRAW_SRBN
  GOSUB @DRAW_MINI_CDS1

  X = GAME_CON_CX * FONT_WIDTH - 4
  Y = GAME_CON_CY * FONT_HEIGHT - 4
  W = GAME_CON_CW * FONT_WIDTH + 8
  H = GAME_CON_CH * FONT_HEIGHT + 4
  GFILL X, Y, X + W - 1, Y + H - 1, COL_WHITE
  GBOX X, Y, X + W - 1, Y + H - 1, COL_GREY
  GPSET X, Y, COL_BOARD
  GPSET X + 1, Y + 1, COL_GREY
  GPSET X + W - 1, Y, COL_BOARD
  GPSET X + W - 2, Y + 1, COL_GREY
'  GPSET X + W - 1, Y + H - 1, COL_BOARD
'  GPSET X + W - 2, Y + H - 2, COL_GREY
'  GPSET X, Y + H - 1, COL_BOARD
'  GPSET X + 1, Y + H - 2, COL_GREY
  GLINE X + 1, Y + H - 1, X + W - 2, Y + H - 1, COL_WHITE
 
  X = RULES_CX * FONT_WIDTH - 4
  Y = RULES_CY * FONT_HEIGHT - 4
  W = 3 * 4 * FONT_WIDTH
  H = 3 * FONT_HEIGHT + 8
  GFILL X, Y, X + W - 1, Y + H - 1, COL_WHITE
  GBOX X, Y, X + W - 1, Y + H - 1, COL_GREY
  GLINE X, Y + FLOOR(H / 2), X + W - 1, Y + FLOOR(H / 2), COL_GREY
  FOR I = 0 TO 4 - 1 - 1
    GLINE X + (I+1)*3*FONT_WIDTH, Y, X + (I+1)*3*FONT_WIDTH, Y + H - 1, COL_GREY
  NEXT

  CON_COL[1] = COL_BLACK
  X = RULES_CX
  Y = RULES_CY
  FOR I = 0 TO 4 - 1
    R = 1: GOSUB @PUSH_R
    R = X + I * 3: GOSUB @PUSH_R
    R = Y: GOSUB @PUSH_R
    R$ = "↑" + MID$(SUIT_CHARS$, I, 1): GOSUB @PUSH_RS
    R$ = "": GOSUB @PUSH_RS
    GOSUB @CON_PRINT

    R = 1: GOSUB @PUSH_R
    R = X + I * 3: GOSUB @PUSH_R
    R = Y + 2: GOSUB @PUSH_R
    R$ = "↓" + MID$(SUIT_CHARS$, I, 1): GOSUB @PUSH_RS
    R$ = "": GOSUB @PUSH_RS
    GOSUB @CON_PRINT
  NEXT

  LOAD "GRP" + STR$(R_GPAGE) + ":" + GRP_FILE_S$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR

  I = GRP_S_TALON
  W = PM_TALON_W
  H = PM_TALON_H
  X = FLOOR(I / GRP_ROWS) * CARD_WIDTH
  Y = (I % GRP_ROWS) * CARD_HEIGHT
  GCOPY R_GPAGE, X, Y, X + W - 1, Y + H - 1, TALON_X, TALON_Y, FALSE 

  I = GRP_S_DISCARDED
  W = PM_DISCARDED_W
  H = PM_DISCARDED_H
  X = FLOOR(I / GRP_ROWS) * CARD_WIDTH
  Y = (I % GRP_ROWS) * CARD_HEIGHT
  GCOPY R_GPAGE, X, Y, X + W - 1, Y + H - 1, DISCARDED_X, DISCARDED_Y, FALSE 
  
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@GAME_CON_CLS '(NONE): NONE
  R$ = "@GAME_CON_CLS": ARGNUM = 0: GOSUB @ENTER

  R = PREV_CY: GOSUB @PUSH_R
  R = PREV_CH: GOSUB @PUSH_R

  PREV_CY = CLIP_CY[1]
  PREV_CH = CLIP_CH[1]
  CLIP_CY[1] = GAME_CON_CY
  CLIP_CH[1] = GAME_CON_CH
  R = 1: GOSUB @PUSH_R
  GOSUB @CON_CLS

  CLIP_CH[1] = PREV_CH
  CLIP_CY[1] = PREV_CY

  GOSUB @POP_R: PREV_CH = R
  GOSUB @POP_R: PREV_CY = R
  
  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@MAIN_PNL_NEW '(NONE): NONE
  R$ = "@MAIN_PNL_NEW": ARGNUM = 0: GOSUB @ENTER

  MAIN_PNL_SEL = -1
  GOSUB @TCH_CTRL_NEW

  R$ = "START": GOSUB @PUSH_RS
  R$ = "RSTQ": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_BUTTON

  R$ = "A": GOSUB @PUSH_RS
  R$ = "CLICK": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_BUTTON

  R$ = "B": GOSUB @PUSH_RS
  R$ = "CANCEL": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_BUTTON

  R = TALON_X: GOSUB @PUSH_R
  R = TALON_Y: GOSUB @PUSH_R
  R = PM_TALON_W: GOSUB @PUSH_R
  R = PM_TALON_H: GOSUB @PUSH_R
  R$ = "TALON": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_ADD

  R = MINI_CDS_X: GOSUB @PUSH_R
  R = MINI_CDS_Y: GOSUB @PUSH_R
  R = MINI_CDS_W: GOSUB @PUSH_R
  R = MINI_CDS_H: GOSUB @PUSH_R
  R = 60: GOSUB @PUSH_R
  R$ = "MINI_CDS_LONG": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_LONG

  R = MINI_CDS_X: GOSUB @PUSH_R
  R = MINI_CDS_Y: GOSUB @PUSH_R
  R = MINI_CDS_W: GOSUB @PUSH_R
  R = MINI_CDS_H: GOSUB @PUSH_R
  R$ = "MINI_CDS": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_ADD

  R = SRBN_CX * FONT_WIDTH: GOSUB @PUSH_R
  R = SRBN_CY * FONT_HEIGHT: GOSUB @PUSH_R
  R = SRBN_CW * FONT_WIDTH: GOSUB @PUSH_R
  R = SRBN_CH * FONT_HEIGHT: GOSUB @PUSH_R
  R$ = "SRBN": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_ADD

  R = RULES_CX * FONT_WIDTH - 4: GOSUB @PUSH_R
  R = RULES_CY * FONT_HEIGHT - 4: GOSUB @PUSH_R
  R = 3 * 4 * FONT_WIDTH: GOSUB @PUSH_R
  R = 3 * FONT_HEIGHT + 8: GOSUB @PUSH_R
  R$ = "RULES": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_ADD

  R = DISCARDED_X: GOSUB @PUSH_R
  R = DISCARDED_Y: GOSUB @PUSH_R
  R = PM_DISCARDED_W: GOSUB @PUSH_R
  R = PM_DISCARDED_H: GOSUB @PUSH_R
  R$ = "DISCARDED": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_ADD

  R$ = "UP": GOSUB @PUSH_RS
  R$ = "B_UP": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_BUTTON

  R$ = "DOWN": GOSUB @PUSH_RS
  R$ = "B_DOWN": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_BUTTON

  R$ = "LEFT": GOSUB @PUSH_RS
  R$ = "B_LEFT": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_BUTTON

  R$ = "RIGHT": GOSUB @PUSH_RS
  R$ = "B_RIGHT": GOSUB @PUSH_RS
  GOSUB @TCH_CTRL_BUTTON

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@POPUP_RSTQ '(NONE): NUMBER
  R$ = "@POPUP_RSTQ": ARGNUM = 0: GOSUB @ENTER

  R$ = S$: GOSUB @PUSH_RS

  RESTORE "@MSG_RSTQ_" + ST_LANG$
  READ A$
  R = -1: GOSUB @PUSH_R
  R = -1: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @OPEN_MSG_WIN

  R = SP_PAGE: GOSUB @PUSH_R: GOSUB @SPPAGE_L
  SPREAD(SP_CURSOR), R, A
  GOSUB @PUSH_R
  R = A
  GOSUB @PUSH_R
  SPOFS SP_CURSOR, -1024, -1024

  RESTORE "@MSG_RSTQYN_" + ST_LANG$
  READ A$, R$
  RA$[0, 0] = "\N[Y]" + A$
  RA$[0, 1] = "Y"
  RA$[1, 0] = "\N[X]" + R$
  RA$[1, 1] = "N"
  RA$[2, 0] = "\B[Y]"
  RA$[2, 1] = "Y"
  RA$[3, 0] = "\B[X]"
  RA$[3, 1] = "N"
  RN = 4
  R = -1: GOSUB @PUSH_R
  R = -1: GOSUB @PUSH_R
  GOSUB @POPUP_MNU_RA
  IF RT$ == "NONE" THEN S$ = "" ELSE S$ = R$

  GOSUB @POP_R
  A = R
  GOSUB @POP_R
  SPOFS SP_CURSOR, A, R
  GOSUB @POP_R: SP_PAGE = R: SPPAGE SP_PAGE

  GOSUB @CLOSE_MSG_WIN

  IF S$ == "Y" THEN A = 1 ELSE A = 0

  GOSUB @POP_RS: S$ = R$

  ARGNUM = 0: GOSUB @LEAVE
  RT$ = "NUMBER"
  R = A
  RETURN


@MAIN_PNL_CHECK_R '(NONE): NONE
  R$ = "@MAIN_PNL_CHECK_R": ARGNUM = 0: GOSUB @ENTER

  GOSUB @TCH_CTRL_CHECK_R
  IF RT$ == "NONE" THEN A = 0: GOTO @_MAIN_PNL_CHK_E

  IF RR$[0] != "RSTQ" THEN A = 1: GOTO @_MAIN_PNL_CHK_E

  GOSUB @POPUP_RSTQ
  IF R THEN RR$[0] = "RESET": RR$[1] = STR$(-1): RR$[2] = STR$(-1): RN = 3
  A = R

@_MAIN_PNL_CHK_E
  ARGNUM = 0: GOSUB @LEAVE
  IF A == 0 THEN RT$ = "NONE" ELSE RT$ = "ARRAY"
  RETURN


@CHECK_CLICK '(WAIT_VTM:NUMBER): STRING
  R$ = "@CHECK_CLICK": ARGNUM = 1: GOSUB @ENTER

  R = WAIT_VTM: GOSUB @PUSH_R

  WAIT_VTM = VAL(STACK$[BP + 1])

@_CHECK_CLICK_LP
  GOSUB @MAIN_PNL_CHECK_R
  IF RT$ == "NONE" THEN @_CHECK_CLICK_1
  A$ = RR$[0]
  IF A$ == "RESET" OR A$ == "TALON" OR A$ == "CLICK" THEN A = 1: GOTO @_CHECK_CLICK_E
@_CHECK_CLICK_1
  A = 0
  IF WAIT_VTM <= 0 THEN @_CHECK_CLICK_E
  WAIT_VTM = WAIT_VTM - 1
  VSYNC 1
  IF WAIT_VTM > 0 THEN @_CHECK_CLICK_LP
@_CHECK_CLICK_E

  GOSUB @POP_R: WAIT_VTM = R

  ARGNUM = 1: GOSUB @LEAVE
'  IF A == 0 THEN RT$ = "NONE" ELSE RT$ = "STRING": R$ = A$
  RT$ = "STRING"
  IF A == 0 THEN R$ = "NONE" ELSE R$ = A$
  RETURN


@DISPLAY_RULE '(UTRGQ:NUMBER, SUIT:NUMBER): NONE
  R$ = "@DISPLAY_RULE": ARGNUM = 2: GOSUB @ENTER

  R = UTRGQ: GOSUB @PUSH_R
  R = SUIT: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS

  UTRGQ = VAL(STACK$[BP + 1])
  SUIT = VAL(STACK$[BP + 2])

  GOSUB @GAME_CON_CLS

  A$ = RULE_COMP$[UTRGQ, SUIT]

  A = INSTR(A$, ">")
  IF A==-1 THEN S$="": A$=MSG_STAY$ ELSE S$=" > "+ MID$(A$,A + 1,LEN(A$)-A-1): A$=MID$(A$,0,A)
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = GAME_CON_CY: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = GAME_CON_CY + 1: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  Y = GAME_CON_CY + 2
  S$ = RULE_MOVE$[UTRGQ, SUIT]
  IF S$ == "" THEN @_DISPLAY_RULE_1
  A$ = S$
  IF A$ == "CHOOSE" THEN A$ = RULE_MOVE_C$[UTRGQ, SUIT]
  A$ = MSG_MOVE$ + MID$(A$, 0, 1) + ":" + MID$(A$, 2, LEN(A$) - 2)
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  Y = Y + 1

@_DISPLAY_RULE_1
  A$ = RULE_STAY$[UTRGQ, SUIT]
  IF S$=="CHOOSE" THEN A$=MSG_STAY$+"("+MSG_OBLIGED$+"):"+A$ ELSE A$=MSG_STAY$+":"+A$
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  Y = Y + 1

  IF S$ != "CHOOSE" THEN @_DISPLAY_RULE_2
  A$ = RULE_STAY_C$[UTRGQ, SUIT]
  A$ = MSG_STAY$ + "(" + MSG_CHOSE$ + "):" +A$
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  Y = Y + 1

@_DISPLAY_RULE_2

  GOSUB @POP_RS: S$ = R$
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: SUIT = R
  GOSUB @POP_R: UTRGQ = R

  ARGNUM = 2: GOSUB @LEAVE
  RETURN


@CLICK_SRBN '(RIGHTQ:NUMBER, MAG:NUMBER, FIVEQ: NUMBER, Y: NUMBER): NONE
  R$ = "@CLICK_SRBN": ARGNUM = 4: GOSUB @ENTER

  R = RIGHTQ: GOSUB @PUSH_R
  R = MAG: GOSUB @PUSH_R
  R = FIVEQ: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = S: GOSUB @PUSH_R

  RIGHTQ = VAL(STACK$[BP + 1])
  MAG = VAL(STACK$[BP + 2])
  FIVEQ = VAL(STACK$[BP + 3])
  Y = VAL(STACK$[BP + 4])

  IF RIGHTQ THEN S = CUR_SOROBAN_R ELSE S = CUR_SOROBAN_L

  R = POW(10, MAG)
  A = FLOOR(S / R) % 10

  IF ! FIVEQ THEN @_DISPLAY_SRBN_N5
  A = FLOOR(A / 5)
  S = S - A * 5 * R
  IF FLOOR(Y / 2) == A THEN A = !A: GOTO @_DISPLAY_SRBN_E
@_DISPLAY_SRBN_N5
  A = A % 5
  S = S - A * R
  IF A == FLOOR(Y / 2) THEN @_DISPLAY_SRBN_E
  IF A < FLOOR(Y / 2) THEN A = FLOOR((Y - 1) / 2): GOTO @_DISPLAY_SRBN_E
  IF A > FLOOR(Y / 2) THEN A = FLOOR((Y + 1) / 2)
@_DISPLAY_SRBN_E
  IF FIVEQ THEN S = S + A * 5 * R ELSE S = S + A * R
  IF RIGHTQ THEN CUR_SOROBAN_R = S ELSE CUR_SOROBAN_L = S

  BGMSET BGM_BEEP, SND_SRBN$
  BGMPLAY BGM_BEEP
  GOSUB @DRAW_SRBN_TAMA

  GOSUB @POP_R: S = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: FIVEQ = R
  GOSUB @POP_R: MAG = R
  GOSUB @POP_R: RIGHTQ = R

  ARGNUM = 4: GOSUB @LEAVE
  RETURN


'Returns -1 when canceled.
@POPUP_CDS_INFO '(NONE): NUMBER
  R$ = "@POPUP_CDS_INFO": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS

  FOR I = 0 TO 6 - 1
    A$ = CUR_BOARD$[I]
    A = VAL(MID$(A$, 1, 2))
    R = (MID$(A$, 3, 1) == "R")
    S$ = STR$(I + 1) + ":(" + STR$(A) + ")" + MSG_TRTMJ$[A] + "\n "
    R$ = TABLE_MAJOR$[A]
    GOSUB @PUSH_RS
    GOSUB @POP_RR

    IF R THEN @_POPUP_CDS_I_1
    S$ = S$ + " " * (2 + LEN(MSG_INV$))
    FOR J = 0 TO 4 - 1
      S$ = S$ + " " + MID$(SUIT_CHARS$, J, 1)
      S$ = S$ + RR$[J * 2] + "/"
      S$ = S$ + RR$[J * 2 + 1]
    NEXT
    GOTO @_POPUP_CDS_I_2
@_POPUP_CDS_I_1
    S$ = S$ + "(" + MSG_INV$ + ")"
    FOR J = 0 TO 4 - 1
      S$ = S$ + " " + MID$(SUIT_CHARS$, 4 - J - 1, 1)
      S$ = S$ + RR$[8 - 1 - (J * 2 + 1)] + "/"
      S$ = S$ + RR$[8 - 1 - J * 2]
    NEXT
@_POPUP_CDS_I_2
    RA$[I, 0] = S$
    RA$[I, 1] = STR$(I)
  NEXT

  RN = 6
  R = -1: GOSUB @PUSH_R
  R = -1: GOSUB @PUSH_R
  GOSUB @POPUP_MNU_RA
  IF RT$ == "NONE" THEN A = -1 ELSE A = VAL(R$)

  GOSUB @POP_RS: S$ = R$
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RT$ = "NUMBER"
  R = A
  RETURN


@DISPLAY_CD_INFO '(MODE$: STRING, PLACE:NUMBER): NONE
  R$ = "@DISPLAY_CD_INFO": ARGNUM = 2: GOSUB @ENTER

  R$ = MODE$: GOSUB @PUSH_RS
  R = PLACE: GOSUB @PUSH_R
  R = I: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R = SC: GOSUB @PUSH_R
  R = N: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1
  R = 14 * 4 + 1: GOSUB @ADD_STACK

  MODE$ = STACK$[BP + 1]
  PLACE = VAL(STACK$[BP + 2])

  GOSUB @GAME_CON_CLS

  IF PLACE == 6 OR PLACE == 7 OR PLACE == 9 THEN @_DISPLAY_CD_I_67
  IF PLACE == 8 THEN @_DISPLAY_CD_I_8
  
  A$ = CUR_BOARD$[PLACE]
  A = VAL(MID$(A$, 1, 2))
  R = (MID$(A$, 3, 1) == "R")
  S$ = "(" + STR$(A) + ")" + MSG_TRTMJ$[A] + "\n "
  R$ = TABLE_MAJOR$[A]
  GOSUB @PUSH_RS
  GOSUB @POP_RR

  IF R THEN @_DISPLAY_CD_I_1
  S$ = S$ + " " * (2 + LEN(MSG_INV$))
  FOR I = 0 TO 4 - 1
    S$ = S$ + " " + MID$(SUIT_CHARS$, I, 1)
    S$ = S$ + RR$[I * 2] + "/"
    S$ = S$ + RR$[I * 2 + 1]
  NEXT
  GOTO @_DISPLAY_CD_I_2
@_DISPLAY_CD_I_1
  S$ = S$ + "(" + MSG_INV$ + ")"
  FOR I = 0 TO 4 - 1
    S$ = S$ + " " + MID$(SUIT_CHARS$, 4 - I - 1, 1)
    S$ = S$ + RR$[8 - 1 - (I * 2 + 1)] + "/"
    S$ = S$ + RR$[8 - 1 - I * 2]
  NEXT
@_DISPLAY_CD_I_2

  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = GAME_CON_CY: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  IF MODE$ != "PLACE" THEN @_DISPLAY_CD_I_3
  IF CUR_PURPOSE_DEG == 0 THEN @_DISPLAY_CD_I_E
  IF CUR_PURPOSE$ == "A00" AND PLACE < 3 THEN @_DISPLAY_CD_I_E
  IF CUR_PURPOSE$ == "A13" AND PLACE >= 3 THEN @_DISPLAY_CD_I_E
  R$ = "@MSG_NOPLSL_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  GOTO @_DISPLAY_CD_I_E

@_DISPLAY_CD_I_3
  R$ = CUR_CARDS$[PLACE]
  GOSUB @PUSH_RS
  GOSUB @POP_RR
  IF RN == 0 THEN @_DISPLAY_CD_I_0
  FOR I = 0 TO RN - 1
    STACK$[RBP + I] = RR$[I]
  NEXT
  N = RN
  S$ = ""
  SC = 0
  FOR I = 0 TO N - 1
    R$ = STACK$[RBP + I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_DCHR
    S$ = S$ + R$
    R$ = STACK$[RBP + I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_SCORE
    SC = SC + R
    IF I != N -1 THEN S$ = S$ + ","
  NEXT
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = GAME_CON_CY + 2: GOSUB @PUSH_R
  R$ = MSG_CARDS$ + ":" + S$ + " = " + STR$(SC) : GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  GOTO @_DISPLAY_CD_I_E
@_DISPLAY_CD_I_0
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = GAME_CON_CY + 2: GOSUB @PUSH_R
  R$ = MSG_CARDS$ + ":" + MSG_NONE$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  GOTO @_DISPLAY_CD_I_E

@_DISPLAY_CD_I_67
  IF PLACE == 9 THEN R$ = CUR_DISCARDED$ ELSE R$ = CUR_CARDS$[PLACE]
  GOSUB @PUSH_RS
  GOSUB @POP_RR
  IF RN == 0 THEN @_DISPLAY_CD_I_60
  FOR I = 0 TO RN - 1
    STACK$[RBP + I] = RR$[I]
  NEXT
  N = RN
  S$ = ""
  SC = 0
  FOR I = 0 TO N - 1
    R$ = STACK$[RBP + I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_DCHR
    S$ = S$ + R$
    IF PLACE == 9 THEN @_DISPLAY_CD_I_6N
    R$ = STACK$[RBP + I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_SCORE
    SC = SC + R
@_DISPLAY_CD_I_6N
    IF I != N -1 THEN S$ = S$ + ","
  NEXT
  IF PLACE != 9 THEN S$ = S$ + " = " + STR$(SC)
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = GAME_CON_CY: GOSUB @PUSH_R
  R$ = MSG_CARDS$ + ":" + S$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  GOTO @_DISPLAY_CD_I_E
@_DISPLAY_CD_I_60
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = GAME_CON_CY: GOSUB @PUSH_R
  R$ = MSG_CARDS$ + ":" + MSG_NONE$:GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  GOTO @_DISPLAY_CD_I_E

@_DISPLAY_CD_I_8
  A$ = CUR_PURPOSE$
  IF A$ == "" THEN A$ = "A00,A13"
  A = VAL(MID$(A$, 1, 2))
  S$ = "(" + STR$(A) + ")" + MSG_TRTMJ$[A]
  IF INSTR(A$, ",") == -1 THEN @_DISPLAY_CD_I_81
  A = VAL(MID$(A$, 5, 2))
  S$ = S$ +  MSG_COMMA$ + " (" + STR$(A) + ")" + MSG_TRTMJ$[A]
@_DISPLAY_CD_I_81
  S$ = S$ + "\n\n"
  R = 1: GOSUB @PUSH_R
  R = GAME_CON_CX: GOSUB @PUSH_R
  R = GAME_CON_CY: GOSUB @PUSH_R
  R$ = S$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT
  GOSUB @BOARD_TO_HXG
  A$ = R$
  R$ = "@MSG_THISHXG_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  GOTO @_DISPLAY_CD_I_E

@_DISPLAY_CD_I_E
  IF PLACE == 9 THEN @_DISPLAY_CD_I_E1
  IF PLACE == 6 OR PLACE == 7 THEN A$ = "CARDS" ELSE A$ = "MAJOR"
  R$ = A$: GOSUB @PUSH_RS
  R = PLACE: GOSUB @PUSH_R
  R$ = "": GOSUB @PUSH_RS
  GOSUB @PLACE_RDLN
@_DISPLAY_CD_I_E1

  R = 14 * 4 + 1: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: N = R
  GOSUB @POP_R: SC = R
  GOSUB @POP_RS: S$ = R$
  GOSUB @POP_R: I = R
  GOSUB @POP_R: PLACE = R
  GOSUB @POP_RS: MODE$ = R$

  ARGNUM = 2: GOSUB @LEAVE
  RETURN


@PLACE_RDLN '(MODE$:STRING, PLACE:NUMBER, POS$:STRING)
  R$ = "@PLACE_RDLN": ARGNUM = 3: GOSUB @ENTER

  R$ = MODE$: GOSUB @PUSH_RS
  R = PLACE: GOSUB @PUSH_R
  R$ = POS$: GOSUB @PUSH_RS
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R

  MODE$ = STACK$[BP + 1]
  PLACE = VAL(STACK$[BP + 2])
  POS$ = STACK$[BP + 3]

  W = CARD_WIDTH
  H = CARD_HEIGHT
  IF MODE$ == "CARD" AND PLACE == -1 THEN @_PLACE_RDLN_DR
  IF MODE$ == "CARD" THEN @_PLACE_RDLN_CD
  IF MODE$ == "CARDS" THEN @_PLACE_RDLN_CDS
  IF MODE$ == "MAJOR" AND PLACE == 8 THEN @_PLACE_RDLN_PP
  X = CARD_X[PLACE]
  Y = CARD_Y[PLACE]
  GOTO @_PLACE_RDLN_1

@_PLACE_RDLN_DR
  X = DRAWN_X
  Y = DRAWN_Y
  GOTO @_PLACE_RDLN_1

@_PLACE_RDLN_PP
  IF CUR_PURPOSE$ == "" OR LEN(CUR_PURPOSE$) > 3 THEN @_PLACE_RDLN_P2
  IF CUR_PURPOSE_DEG == 90 OR CUR_PURPOSE_DEG == 270 THEN @_PLACE_RDLN_P1
  X = 2
  Y = CARDS_CENTER_Y - CARD_HH - 8
  GOTO @_PLACE_RDLN_1

@_PLACE_RDLN_P1
  X = 2
  Y = CARDS_CENTER_Y - CARD_HW - 12
  W = CARD_HEIGHT
  H = CARD_WIDTH
  GOTO @_PLACE_RDLN_1

@_PLACE_RDLN_P2
  X = 2
  Y = CARDS_CENTER_Y - CARD_HH - 8
  W = CARD_WIDTH + 8
  H = CARD_HEIGHT
  GOTO @_PLACE_RDLN_1

@_PLACE_RDLN_CD
  R = VAL(POS$): GOSUB @PUSH_R
  R$ = CUR_CARDS$[PLACE]: GOSUB @PUSH_RS
  R$ = CARDS_ANCHOR$[PLACE]: GOSUB @PUSH_RS
  GOSUB @NTH_CD_XY
  X = CARDS_X[PLACE] + VAL(RR$[0])
  Y = CARDS_Y[PLACE] + VAL(RR$[1])
  GOTO @_PLACE_RDLN_1

@_PLACE_RDLN_CDS
  X = CARDS_X[PLACE]
  Y = CARDS_Y[PLACE]
  R = FLOOR((LEN(CUR_CARDS$[PLACE]) + 1) / 4)
  IF R == 0 THEN GOSUB @OMIT_RDLN: GOTO @_PLACE_RDLN_E
  IF R > 5 THEN @_PLACE_RDLN_F
  W = CARD_WIDTH + (R - 1) * 8
  A$ = CARDS_ANCHOR$[PLACE]
  R$ = ""
  IF MID$(A$,0,1)=="S" OR MID$(A$,0,1)=="N" THEN R$=MID$(A$,0,1): A$=MID$(A$,1,LEN(A$)-1)
  A = (5 - R) * 8 / 2
  IF A$ == "W" THEN A = 0
  IF A$ == "E" THEN A = (5 - R) * 8
  R = 8
  IF R$ == "N" THEN R = 0
  IF R$ == "S" THEN R = 2 * 8
  X = X + A
  Y = Y + R
  GOTO @_PLACE_RDLN_1

@_PLACE_RDLN_F
  W = CARD_WIDTH + 4 * 8
  H = CARD_HEIGHT + (1 + (R > 10)) * 8
  IF MID$(CARDS_ANCHOR$[PLACE], 0, 1) == "S" AND R <= 10 THEN Y = Y + 8

@_PLACE_RDLN_1
  IF ST_UREV THEN X = GRP_WIDTH - X - W: Y = GRP_HEIGHT - Y - H
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R
  GOSUB @DRAW_RDLN

@_PLACE_RDLN_E
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_RS: POS$ = R$
  GOSUB @POP_R: PLACE = R
  GOSUB @POP_RS: MODE$ = R$

  ARGNUM = 3: GOSUB @LEAVE
  RETURN


@PLACE_RDLN_CD '(POS: NUMBER, SP1: NUMBER): NONE
  R$ = "@PLACE_RDLN_CD": ARGNUM = 2: GOSUB @ENTER

  R = POS: GOSUB @PUSH_R
  R = SP1: GOSUB @PUSH_R

  POS = VAL(STACK$[BP + 1])
  SP1 = VAL(STACK$[BP + 2])

  SPSET SP1, 4 * 64 + SPU4_RDLN_CD / 4, 0, 0, 0, 2, 64, 64
  IF ST_UREV THEN SPANGLE SP1, 180
  A = CARD_X[POS]
  R = CARD_Y[POS]
  IF ST_UREV THEN A = GRP_WIDTH - A - 1: R = GRP_HEIGHT - R - 1
  SPOFS SP1, A, R

  GOSUB @POP_R: SP1 = R
  GOSUB @POP_R: POS = R

  ARGNUM = 2: GOSUB @LEAVE
  RETURN


'MODE$: "TALON": click the talon, "PLACE": choose the first token place.
@MAIN_PNL_LOOP_R '(MODE$:NONE): NONE
  R$ = "@MAIN_PNL_LOOP_R": ARGNUM = 1: GOSUB @ENTER

  R$ = MODE$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R

  MODE$ = STACK$[BP + 1]

  R = SP_PAGE: GOSUB @PUSH_R: GOSUB @SPPAGE_L
  R = BG_PAGE: GOSUB @PUSH_R: GOSUB @BGPAGE_L

  MAIN_PNL_SEL = -1
@_MAIN_PNL_LP_LP
  GOSUB @MAIN_PNL_CHECK_R
  IF RT$ == "NONE" THEN VSYNC 1: GOTO @_MAIN_PNL_LP_LP

  IF RR$[0] == "RESET" THEN A = 1: RN = 1: GOTO @_MAIN_PNL_LP_E

  IF MODE$=="TALON" AND MAIN_PNL_SEL==-1 AND RR$[0]=="CLICK" THEN A = 1: GOTO @_MAIN_PNL_LP_E
  IF MODE$ == "TALON" AND RR$[0] == "TALON" THEN A = 1: GOTO @_MAIN_PNL_LP_E
  IF MODE$ == "PLACE" AND RR$[0] == "CLICK" THEN @_MAIN_PNL_LP_PL
  IF MODE$ == "PLACE" AND RR$[0] == "TALON" THEN @_MAIN_PNL_LP_CN
  IF MODE$ == "TALON" AND RR$[0] == "CLICK" THEN @_MAIN_PNL_LP_CN
@_MAIN_PNL_LP_NPC
  IF RR$[0] == "CANCEL" AND MAIN_PNL_SEL != -1 THEN @_MAIN_PNL_LP_CN
  IF RR$[0] == "CANCEL" THEN @_MAIN_PNL_LP_LP
  IF MID$(RR$[0], 0, 2) == "B_" THEN @_MAIN_PNL_LP_BTN
  IF RR$[0] == "MINI_CDS" THEN @_MAIN_PNL_LP_MC
  IF RR$[0] == "MINI_CDS_LONG" THEN @_MAIN_PNL_LP_MCL
  IF RR$[0] == "DISCARDED" THEN @_MAIN_PNL_LP_DSC
  IF RR$[0] == "RULES" THEN @_MAIN_PNL_LP_RL
  IF RR$[0] == "SRBN" THEN @_MAIN_PNL_LP_SB

  PRINT "Unreacheable code!"
  STOP: RETURN

@_MAIN_PNL_LP_PL
  IF !(MAIN_PNL_SEL >= 0 AND MAIN_PNL_SEL <= 5) THEN @_MAIN_PNL_LP_LP
  IF CUR_PURPOSE$ == "A00" AND MAIN_PNL_SEL >= 3 THEN @_MAIN_PNL_LP_CN
  IF CUR_PURPOSE$ == "A13" AND MAIN_PNL_SEL < 3 THEN @_MAIN_PNL_LP_CN
  RR$[0] = "PLACE"
  RR$[1] = STR$(MAIN_PNL_SEL)
  RN = 2
  A = 1
  GOTO @_MAIN_PNL_LP_E

@_MAIN_PNL_LP_SB
  X = VAL(RR$[1])
  Y = VAL(RR$[2])

  X = FLOOR(X / 8)
  Y = FLOOR(Y / 4)
  IF X == 0 OR X == SRBN_CW - 1 THEN @_MAIN_PNL_LP_SB0
  IF Y == 0 OR Y == 1 OR Y == 6 OR Y == 7 OR Y == 18 OR Y == 19 THEN @_MAIN_PNL_LP_LP
  X = FLOOR((X - 1) / 2)
  R = (X > 2): GOSUB @PUSH_R
  R = 2 - (X - 3 * R): GOSUB @PUSH_R
  R = (Y < 6): GOSUB @PUSH_R
  IF Y >= 8 THEN Y = Y - 8 ELSE Y = Y - 2
  R = Y: GOSUB @PUSH_R
  GOSUB @CLICK_SRBN
  GOTO @_MAIN_PNL_LP_LP
@_MAIN_PNL_LP_SB0
  CUR_SOROBAN_L = 0
  CUR_SOROBAN_R = 0
  BGMSET BGM_BEEP, SND_SRBN_CLR$
  BGMPLAY BGM_BEEP
  GOSUB @DRAW_SRBN_TAMA
  GOTO @_MAIN_PNL_LP_LP

@_MAIN_PNL_LP_RL
  A = VAL(RR$[1])
  R = VAL(RR$[2])

  A = FLOOR(A / (3 * FONT_WIDTH)) + FLOOR(R / 16) * 4
  MAIN_PNL_SEL = 10 + A
  GOTO @_MAIN_PNL_LP_SEL

@_MAIN_PNL_LP_DSC
  R$ = MODE$: GOSUB @PUSH_RS
  R = 9: GOSUB @PUSH_R
  GOSUB @DISPLAY_CD_INFO
  GOTO @_MAIN_PNL_LP_LP

@_MAIN_PNL_LP_MCL
  SPOFS SP_CURSOR, -1024, -1024
  GOSUB @POPUP_CDS_INFO
  IF R == -1 THEN MAIN_PNL_SEL = -1: GOTO @_MAIN_PNL_LP_LP
  RR$[0] = "PLACE"
  RR$[1] = STR$(R)
  MAIN_PNL_SEL = R
  IF MODE$ == "PLACE" THEN @_MAIN_PNL_LP_PL
  GOTO @_MAIN_PNL_LP_SEL

@_MAIN_PNL_LP_MC
  A = VAL(RR$[1])
  R = VAL(RR$[2])
  I = 0
  IF ST_UREV THEN @_MAIN_PNL_LP_MC1
@_MAIN_PNL_LP_MC2
  X = MINI_CD_X[I]
  Y = MINI_CD_Y[I]
  IF A >= X AND A < X + MINI_CD_W AND R >= Y AND R  < Y + MINI_CD_H THEN @_MAIN_PNL_LP_MC0
  I = I + 1
  IF I < 9 THEN @_MAIN_PNL_LP_MC2
  GOTO @_MAIN_PNL_LP_LP
@_MAIN_PNL_LP_MC1
  X = MINI_CDS_W - 1 - MINI_CD_X[I] - MINI_CD_W + 1
  Y = MINI_CDS_H - 1 - MINI_CD_Y[I] - MINI_CD_H + 1
  IF A >= X AND A < X + MINI_CD_W AND R >= Y AND R  < Y + MINI_CD_H THEN @_MAIN_PNL_LP_MC0
  I = I + 1
  IF I < 9 THEN @_MAIN_PNL_LP_MC1
  GOTO @_MAIN_PNL_LP_LP
@_MAIN_PNL_LP_MC0
  RR$[0] = "PLACE"
  RR$[1] = STR$(I)
  IF MODE$ == "PLACE" AND MAIN_PNL_SEL == I THEN @_MAIN_PNL_LP_PL
  MAIN_PNL_SEL = I
  GOTO @_MAIN_PNL_LP_SEL

@_MAIN_PNL_LP_BTN
  IF ST_UREV THEN @_MAIN_PNL_LP_BTR
  A = MAIN_PNL_SEL
  A$ = RR$[0]
  BEEP BEEP_SELECT
  IF A == -1 THEN @_MAIN_PNL_LP_B0
  IF A >= 0 AND A <= 5 THEN @_MAIN_PNL_LP_B1
  IF A == 6 THEN @_MAIN_PNL_LP_BC
  IF A == 7 THEN @_MAIN_PNL_LP_BS
  IF A == 8 THEN @_MAIN_PNL_LP_BP
  IF A >= 10 AND A <= 17 THEN @_MAIN_PNL_LP_BR
@_MAIN_PNL_LP_B0
  IF A$ == "B_DOWN" OR A$ == "B_LEFT" THEN MAIN_PNL_SEL = 0
  IF A$ == "B_UP" OR A$ == "B_RIGHT" THEN MAIN_PNL_SEL = 14
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_B1
  IF A$ == "B_UP" AND A <= 2 THEN A = A + 3: GOTO @_MAIN_PNL_LP_B2
  IF A$ == "B_UP" AND A > 2 THEN A = 7: GOTO @_MAIN_PNL_LP_B2
  IF A$ == "B_RIGHT" AND A != 0 AND A != 3 THEN A = A - 1: GOTO @_MAIN_PNL_LP_B2
  IF A$ == "B_RIGHT" AND (A == 0 OR A == 3) THEN A = 10: GOTO @_MAIN_PNL_LP_B2
  IF A$ == "B_LEFT" AND A != 2 AND A != 5 THEN A = A + 1: GOTO @_MAIN_PNL_LP_B2
  IF A$ == "B_LEFT" AND (A == 2 OR A == 5) THEN A = 8: GOTO @_MAIN_PNL_LP_B2
  IF A$ == "B_DOWN" AND A <= 2 THEN A = 6: GOTO @_MAIN_PNL_LP_B2
  IF A$ == "B_DOWN" AND A >= 2 THEN A = A - 3: GOTO @_MAIN_PNL_LP_B2
@_MAIN_PNL_LP_B2
  IF MODE$ != "PLACE" OR (A >= 0 AND A <= 5) OR (A == 8) THEN MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BC
  IF A$ == "B_UP" THEN A = 1
  IF A$ == "B_RIGHT" THEN A = 0
  IF A$ == "B_LEFT" THEN A = 2
  MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BS
  IF A$ == "B_DOWN" THEN A = 4
  IF A$ == "B_RIGHT" THEN A = 3
  IF A$ == "B_LEFT" THEN A = 5
  MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BP
  IF A$ == "B_UP" THEN A = 5
  IF A$ == "B_DOWN" THEN A = 2
  IF A$ == "B_RIGHT" THEN A = 2
  IF A$ == "B_LEFT" THEN A = 13
  MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BR
  IF A$ == "B_UP" AND A == 13 THEN A = 8: GOTO @_MAIN_PNL_LP_BE
  IF A$ == "B_UP" AND A >= 14 THEN A = A - 4: GOTO @_MAIN_PNL_LP_BE
  IF A$ == "B_DOWN" AND A <= 13 THEN A = A + 4: GOTO @_MAIN_PNL_LP_BE
  IF A$ == "B_RIGHT" AND (A != 13 AND A != 17) THEN A = A + 1: GOTO @_MAIN_PNL_LP_BE
  IF A$ == "B_RIGHT" AND (A == 13 OR A == 17) THEN A = 8: GOTO @_MAIN_PNL_LP_BE
  IF A$ == "B_LEFT" AND (A != 10 AND A != 14) THEN A = A - 1: GOTO @_MAIN_PNL_LP_BE
  IF A$ == "B_LEFT" AND (A == 10 OR A == 14) THEN A = 0: GOTO @_MAIN_PNL_LP_BE
@_MAIN_PNL_LP_BE
  MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL

@_MAIN_PNL_LP_BTR
  A = MAIN_PNL_SEL
  A$ = RR$[0]
  BEEP BEEP_SELECT
  IF A == -1 THEN @_MAIN_PNL_LP_BR0
  IF A >= 0 AND A <= 5 THEN @_MAIN_PNL_LP_BR1
  IF A == 6 THEN @_MAIN_PNL_LP_BRC
  IF A == 7 THEN @_MAIN_PNL_LP_BRS
  IF A == 8 THEN @_MAIN_PNL_LP_BRP
  IF A >= 10 AND A <= 17 THEN @_MAIN_PNL_LP_BRR
@_MAIN_PNL_LP_BR0
  IF A$ == "B_DOWN" OR A$ == "B_LEFT" THEN MAIN_PNL_SEL = 8 
  IF A$ == "B_UP" OR A$ == "B_RIGHT" THEN MAIN_PNL_SEL = 14
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BR1
  IF A$ == "B_DOWN" AND A <= 2 THEN A = A + 3: GOTO @_MAIN_PNL_LP_BR2
  IF A$ == "B_DOWN" AND A > 2 THEN A = 7: GOTO @_MAIN_PNL_LP_BR2
  IF A$ == "B_LEFT" AND A != 0 AND A != 3 THEN A = A - 1: GOTO @_MAIN_PNL_LP_BR2
  IF A$ == "B_LEFT" AND (A == 0 OR A == 3) THEN A = 8: GOTO @_MAIN_PNL_LP_BR2
  IF A$ == "B_RIGHT" AND A != 2 AND A != 5 THEN A = A + 1: GOTO @_MAIN_PNL_LP_BR2
  IF A$ == "B_RIGHT" AND (A == 2 OR A == 5) THEN A = 14: GOTO @_MAIN_PNL_LP_BR2
  IF A$ == "B_UP" AND A <= 2 THEN A = 6: GOTO @_MAIN_PNL_LP_BR2
  IF A$ == "B_UP" AND A >= 2 THEN A = A - 3: GOTO @_MAIN_PNL_LP_BR2
@_MAIN_PNL_LP_BR2
  IF MODE$ != "PLACE" OR (A >= 0 AND A <= 5) OR (A == 8) THEN MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BRC
  IF A$ == "B_DOWN" THEN A = 1
  IF A$ == "B_LEFT" THEN A = 0
  IF A$ == "B_RIGHT" THEN A = 2
  MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BRS
  IF A$ == "B_UP" THEN A = 4
  IF A$ == "B_LEFT" THEN A = 3
  IF A$ == "B_RIGHT" THEN A = 5
  MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BRP
  IF A$ == "B_DOWN" THEN A = 5
  IF A$ == "B_UP" THEN A = 2
  IF A$ == "B_LEFT" THEN A = 2
  IF A$ == "B_RIGHT" THEN A = 10
  MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL
@_MAIN_PNL_LP_BRR
  IF A$ == "B_UP" AND A == 13 THEN A = 3: GOTO @_MAIN_PNL_LP_BRE
  IF A$ == "B_UP" AND A >= 14 THEN A = A - 4: GOTO @_MAIN_PNL_LP_BRE
  IF A$ == "B_DOWN" AND A <= 13 THEN A = A + 4: GOTO @_MAIN_PNL_LP_BRE
  IF A$ == "B_RIGHT" AND (A != 13 AND A != 17) THEN A = A + 1: GOTO @_MAIN_PNL_LP_BRE
  IF A$ == "B_RIGHT" AND (A == 13 OR A == 17) THEN A = 3: GOTO @_MAIN_PNL_LP_BRE
  IF A$ == "B_LEFT" AND (A != 10 AND A != 14) THEN A = A - 1: GOTO @_MAIN_PNL_LP_BRE
  IF A$ == "B_LEFT" AND (A == 10 OR A == 14) THEN A = 8: GOTO @_MAIN_PNL_LP_BRE
@_MAIN_PNL_LP_BRE
  MAIN_PNL_SEL = A
  GOTO @_MAIN_PNL_LP_SEL

@_MAIN_PNL_LP_CN
  BEEP BEEP_CANCEL
  MAIN_PNL_SEL = -1
  GOTO @_MAIN_PNL_LP_SEL

@_MAIN_PNL_LP_SEL
  IF MAIN_PNL_SEL == -1 THEN @_MAIN_PNL_LP_SLC
  
  IF MAIN_PNL_SEL >= 10 AND MAIN_PNL_SEL <= 17 THEN @_MAIN_PNL_LP_SLR

  A = MAIN_PNL_SEL
  X = MINI_CD_X[A]
  Y = MINI_CD_Y[A]
  IF ! ST_UREV THEN @_MAIN_PNL_LP_SL1
  X = MINI_CDS_W - 1 - X
  Y = MINI_CDS_H - 1 - Y
  X = X + MINI_CDS_X - MINI_CD_W + 1 + FLOOR(MINI_CD_W / 2)
  Y = Y + MINI_CDS_Y - MINI_CD_H + 1 + FLOOR(MINI_CD_H / 2)
  SPOFS SP_CURSOR, X, Y
  GOTO @_MAIN_PNL_LP_SL2  
@_MAIN_PNL_LP_SL1
  X = X + MINI_CDS_X + FLOOR(MINI_CD_W / 2)
  Y = Y + MINI_CDS_Y + FLOOR(MINI_CD_H / 2)
  SPOFS SP_CURSOR, X, Y
@_MAIN_PNL_LP_SL2
  R$ = MODE$: GOSUB @PUSH_RS
  R = A: GOSUB @PUSH_R
  GOSUB @DISPLAY_CD_INFO
  GOTO @_MAIN_PNL_LP_LP

@_MAIN_PNL_LP_SLR
  GOSUB @OMIT_RDLN
  A = MAIN_PNL_SEL - 10
  X = ((A % 4) * 3 + RULES_CX) *  FONT_WIDTH - 4 + 12
  Y = (FLOOR(A / 4) * 2 + RULES_CY) *  FONT_HEIGHT - 4 + 8
  SPOFS SP_CURSOR, X, Y
  R = ! FLOOR(A / 4) : GOSUB @PUSH_R
  R = A % 4: GOSUB @PUSH_R
  GOSUB @DISPLAY_RULE
  GOTO @_MAIN_PNL_LP_LP

@_MAIN_PNL_LP_SLC
  GOSUB @OMIT_RDLN
  GOSUB @GAME_CON_CLS
  SPOFS SP_CURSOR, -1024, -1024
  IF MODE$ == "TALON" THEN A$ = "@MSG_CLKTLN_" + ST_LANG$
  IF MODE$ == "PLACE" THEN A$ = "@MSG_CHSPLS_" + ST_LANG$
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L

  IF CUR_PURPOSE_DEG == 0 OR MODE$ == "PLACE" THEN @_MAIN_PNL_LP_LP
  IF CUR_PURPOSE_DEG == 90 AND CUR_PURPOSE$ == "A00" THEN RR$[0]=MSG_HXG$[64]: RR$[1]=MSG_LTRG$
  IF CUR_PURPOSE_DEG == 90 AND CUR_PURPOSE$ == "A13" THEN RR$[0]=MSG_HXG$[65]: RR$[1]=MSG_UTRG$
  IF CUR_PURPOSE_DEG == 270 AND CUR_PURPOSE$ == "A00" THEN RR$[0]=MSG_HXG$[66]: RR$[1]=MSG_LTRG$
  IF CUR_PURPOSE_DEG == 270 AND CUR_PURPOSE$ == "A13" THEN RR$[0]=MSG_HXG$[67]: RR$[1]=MSG_UTRG$
  RN = 2
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  A$ = R$
  R$ = "@MSG_CHSPLSS_" + ST_LANG$: GOSUB @PUSH_RS
  R$ = A$: GOSUB @PUSH_RS
  GOSUB @CON_PRINT_L
  GOTO @_MAIN_PNL_LP_LP

@_MAIN_PNL_LP_E
  SPOFS SP_CURSOR, -1024, -1024
  GOSUB @OMIT_RDLN

  GOSUB @POP_R: BG_PAGE = R: BGPAGE BG_PAGE
  GOSUB @POP_R: SP_PAGE = R: SPPAGE SP_PAGE

  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: MODE$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  IF A == 0 THEN RT$ = "NONE" ELSE RT$ = "ARRAY"
  RETURN


@SPRITE_ALLOC_R '(SIZE:NUMBER):ARRAY
  R$ = "@SPRITE_ALLOC_R": ARGNUM = 1: GOSUB @ENTER

  R = SIZE: GOSUB @PUSH_R
  R = I: GOSUB @PUSH_R

  SIZE = VAL(STACK$[BP + 1])

  I = SPRITE_ALLOC_MIN
  RN = 0
@_SP_ALLOC_LP
  IF RN >= SIZE THEN A = 1: GOTO @_SP_ALLOC_E
  IF I >= SPRITE_LEN THEN A = 0: GOTO @_SP_ALLOC_E
  IF SPRITE$[I] != "" THEN @_SP_ALLOC_SK
  RR$[RN] = STR$(I)
  SPRITE$[I] = "A"
  RN = RN + 1
@_SP_ALLOC_SK
  I = I + 1
  GOTO @_SP_ALLOC_LP

@_SP_ALLOC_E
  GOSUB @POP_R: I = R
  GOSUB @POP_R: SIZE = R

  ARGNUM = 1: GOSUB @LEAVE
  IF A == 0 THEN RT$ = "NONE" ELSE RT$ = "ARRAY"
  IF A == 0 THEN PRINT "Can't allocate sprites!": STOP: RETURN
  RETURN


@SPRITE_FREE '(ALLOC_LIST$:SARRAY):NONE
  R$ = "@SPRITE_FREE": ARGNUM = 1: GOSUB @ENTER

  R$ = ALLOC_LIST$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R

  ALLOC_LIST$ = STACK$[BP + 1]

  R$ = ALLOC_LIST$: GOSUB @PUSH_RS
  GOSUB @POP_RR

  FOR I = 0 TO RN -1
    SPCLR VAL(RR$[I])
    SPRITE$[VAL(RR$[I])] = ""
  NEXT

  GOSUB @POP_R: I = R
  GOSUB @POP_RS: ALLOC_LIST$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


'Make 68x72dot Sprite Group.
@MAKE_CDS_SPG '(CDS$:SARRAY, ANCHOR$:STRING): SARRAY
  R$ = "@MAKE_CDS_SPG": ARGNUM = 2: GOSUB @ENTER

  R$ = CDS$: GOSUB @PUSH_RS
  R$ = ANCHOR$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = SX: GOSUB @PUSH_R
  R = SY: GOSUB @PUSH_R
  R = AX: GOSUB @PUSH_R
  R = AY: GOSUB @PUSH_R
  R = N: GOSUB @PUSH_R
  R = NS: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  R = SBP: GOSUB @PUSH_R

  CDS$ = STACK$[BP + 1]
  ANCHOR$ = STACK$[BP + 2]

  R$ = CDS$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  N = RN
  RBP = SP + 1
  R = N: GOSUB @ADD_STACK
  FOR I = 0 TO N - 1
    STACK$[RBP + I] = RR$[I]
  NEXT
  SBP = SP + 1
  NS = N + 2
  IF N > 5 THEN NS = NS + 2
  R = NS: GOSUB @ADD_STACK

  R = NS: GOSUB @PUSH_R
  GOSUB @SPRITE_ALLOC_R
  FOR I = 0 TO NS - 1
   STACK$[SBP + I] = RR$[I]
  NEXT

  IF N > 5 THEN @_MK_CDS_SPG_G5

  A$ = ANCHOR$
  R$ = ""
  IF MID$(A$,0,1)=="S" OR MID$(A$,0,1)=="N" THEN R$=MID$(A$,0,1): A$=MID$(A$,1,LEN(A$)-1)
  AX = (5 - N) * 8 / 2
  IF A$ == "W" THEN AX = 0
  IF A$ == "E" THEN AX = (5 - N) * 8
  AY = 8
  IF R$ == "N" THEN AY = 0
  IF R$ == "S" THEN AY = 2 * 8

  FOR I = 0 TO N - 1
    SY = AY + 0
    SX = AX + (N - I - 1) * 8
    R$ = STACK$[RBP + I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_ID_NUM
    R = SPU6_CDTL_S_OFS + (R - 22) * 4
    CHRREAD("SPU6", R), A$
    IF I == N - 1 THEN A$ = SUBST$(A$, 0, 1, "0") ELSE A$ = SUBST$(A$, 0, 1, "1")
    CHRSET "SPU6", R, A$
    R =  6 * 64 + R / 4
    IF I == 0 THEN A = 16 ELSE A = 8
    SPSET VAL(STACK$[SBP + I]), R, 0, 0, 0, 3, A, 8
    SPHOME VAL(STACK$[SBP + I]), -SX, -SY
    SPOFS VAL(STACK$[SBP + I]), -1024, -1024
    RR$[SPR_NOTCLR] = "1"
    RR$[SPR_CHR] = STR$(R)
    RR$[SPR_PL] = "0"
    RR$[SPR_DEPTH] = "3"
    RR$[SPR_W] = STR$(A)
    RR$[SPR_H] = "8"
    RR$[SPR_HOME_X] = STR$(-SX)
    RR$[SPR_HOME_Y] = STR$(-SY)
    RN = SPR_N
    GOSUB @PUSH_RR
    GOSUB @POP_RS
    SPRITE$[VAL(STACK$[SBP + I])] = R$
  NEXT

  SX = AX + (N - 1) * 8
  SY = AY + 0
  IF N == 1 THEN R = 5 * 64 + SPU5_WHCD / 4
  IF N != 1 THEN R = 5 * 64 + SPU5_WHCD_PL / 4
  SPSET VAL(STACK$[SBP + N]), R, 0, 0, 0, 3, 64, 64
  SPHOME VAL(STACK$[SBP + N]), -SX, -SY
  SPOFS VAL(STACK$[SBP + N]), -1024, -1024
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(R)
  RR$[SPR_PL] = "0"
  RR$[SPR_DEPTH] = "3"
  RR$[SPR_W] = "64"
  RR$[SPR_H] = "64"
  RR$[SPR_HOME_X] = STR$(-SX)
  RR$[SPR_HOME_Y] = STR$(-SY)
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[VAL(STACK$[SBP + N])] = R$

  SX = AX + 0
  SY = AY + 0
  IF N == 1 THEN I = 16: J = 16: R = 7 * 64 + SPU7_NONE / 4
  IF N != 1 THEN I = 32: J = 64: R = 4 * 64 + (SPU4_CDSBL_OFS + (N - 2) * 4 * 8) / 4
  SPSET VAL(STACK$[SBP + N + 1]), R, 0, 0, 0, 3, I, J
  SPHOME VAL(STACK$[SBP + N + 1]), -SX, -SY
  SPOFS VAL(STACK$[SBP + N + 1]), -1024, -1024
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(R)
  RR$[SPR_PL] = "0"
  RR$[SPR_DEPTH] = "3"
  RR$[SPR_W] = STR$(I)
  RR$[SPR_H] = STR$(J)
  RR$[SPR_HOME_X] = STR$(-SX)
  RR$[SPR_HOME_Y] = STR$(-SY)
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[VAL(STACK$[SBP + N + 1])] = R$

  GOTO @_MK_CDS_SPG_E
  
@_MK_CDS_SPG_G5
  AX = 0
  AY = 0
  IF MID$(ANCHOR$, 0, 1) == "S" AND N <= 10 THEN AY = 8
  FOR I = 0 TO N - 1
    SY = (FLOOR(N / 5) + !!(N % 5) - 1) * 8
    IF N > 10 THEN A = N - 10 ELSE A = N - 5
    SX = (5 - I - 1) * 8
    IF I >= A THEN SY = SY - 8: SX = (5 - (I - A) - 1) * 8
    IF I >= A + 5 THEN SY = SY - 8: SX = (5 - (I - A - 5) - 1) * 8
    R$ = STACK$[RBP + I]: GOSUB @PUSH_RS
    GOSUB @CARD_TO_ID_NUM
    R = SPU6_CDTL_S_OFS + (R - 22) * 4
    CHRREAD("SPU6", R), A$
    IF SX == 0 AND SY == 0 THEN A$ = SUBST$(A$, 0, 1, "0") ELSE A$ = SUBST$(A$, 0, 1, "1")
    CHRSET "SPU6", R, A$
    R =  6 * 64 + R / 4
    IF SX == 4 * 8 THEN A = 16 ELSE A = 8
    SX = SX + AX
    SY = SY + AY
    SPSET VAL(STACK$[SBP + I]), R, 0, 0, 0, 3, A, 8
    SPHOME VAL(STACK$[SBP + I]), -SX, -SY
    SPOFS VAL(STACK$[SBP + I]), -1024, -1024
    RR$[SPR_NOTCLR] = "1"
    RR$[SPR_CHR] = STR$(R)
    RR$[SPR_PL] = "0"
    RR$[SPR_DEPTH] = "3"
    RR$[SPR_W] = STR$(A)
    RR$[SPR_H] = "8"
    RR$[SPR_HOME_X] = STR$(-SX)
    RR$[SPR_HOME_Y] = STR$(-SY)
    RN = SPR_N
    GOSUB @PUSH_RR
    GOSUB @POP_RS
    SPRITE$[VAL(STACK$[SBP + I])] = R$
  NEXT

  SX = AX + 4 * 8
  SY = AY + (1 + (N > 10)) * 8
  R = 5 * 64 + SPU5_WHCD_PTL / 4
  SPSET VAL(STACK$[SBP + N]), R, 0, 0, 0, 3, 64, 64
  SPHOME VAL(STACK$[SBP + N]), -SX, -SY
  SPOFS VAL(STACK$[SBP + N]), -1024, -1024
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(R)
  RR$[SPR_PL] = "0"
  RR$[SPR_DEPTH] = "3"
  RR$[SPR_W] = "64"
  RR$[SPR_H] = "64"
  RR$[SPR_HOME_X] = STR$(-SX)
  RR$[SPR_HOME_Y] = STR$(-SY)
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[VAL(STACK$[SBP + N])] = R$

  SX = AX + 5 * 8
  SY = AY + 0
  R = 4 * 64 + (SPU4_CDSTR_OFS + (N > 10) * 4 * 2) / 4
  SPSET VAL(STACK$[SBP + N + 1]), R, 0, 0, 0, 3, 32, 16
  SPHOME VAL(STACK$[SBP + N + 1]), -SX, -SY
  SPOFS VAL(STACK$[SBP + N + 1]), -1024, -1024
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(R)
  RR$[SPR_PL] = "0"
  RR$[SPR_DEPTH] = "3"
  RR$[SPR_W] = "32"
  RR$[SPR_H] = "16"
  RR$[SPR_HOME_X] = STR$(-SX)
  RR$[SPR_HOME_Y] = STR$(-SY)
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[VAL(STACK$[SBP + N + 1])] = R$

  IF N > 10 THEN A = N - 10 ELSE A = N - 5
  SX = AX + (5 - A) * 8
  SY = AY + (1 + (N > 10)) * 8
  IF A == 1 THEN I = 16: J = 16: R = 7 * 64 + SPU7_NONE / 4
  IF A != 1 THEN I = 32: J = 64: R = 4 * 64 + (SPU4_CDSBL_OFS + (A - 2) * 4 * 8) / 4
  SPSET VAL(STACK$[SBP + N + 2]), R, 0, 0, 0, 3, I, J
  SPHOME VAL(STACK$[SBP + N + 2]), -SX, -SY
  SPOFS VAL(STACK$[SBP + N + 2]), -1024, -1024
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(R)
  RR$[SPR_PL] = "0"
  RR$[SPR_DEPTH] = "3"
  RR$[SPR_W] = STR$(I)
  RR$[SPR_H] = STR$(J)
  RR$[SPR_HOME_X] = STR$(-SX)
  RR$[SPR_HOME_Y] = STR$(-SY)
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[VAL(STACK$[SBP + N + 2])] = R$

  SX = AX + 0
  SY = AY + (0 + (N > 10)) * 8
  R = 4 * 64 + (SPU4_CDSBL_OFS + 3 * 4 * 8) / 4
  SPSET VAL(STACK$[SBP + N + 3]), R, 0, 0, 0, 3, 32, 64
  SPHOME VAL(STACK$[SBP + N + 3]), -SX, -SY
  SPOFS VAL(STACK$[SBP + N + 3]), -1024, -1024
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(R)
  RR$[SPR_PL] = "0"
  RR$[SPR_DEPTH] = "3"
  RR$[SPR_W] = "32"
  RR$[SPR_H] = "64"
  RR$[SPR_HOME_X] = STR$(-SX)
  RR$[SPR_HOME_Y] = STR$(-SY)
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[VAL(STACK$[SBP + N + 3])] = R$

@_MK_CDS_SPG_E
  FOR I = 0 TO NS - 1
    RR$[I] = STACK$[SBP + I]
  NEXT
  RN = NS
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  A$ = R$

  R = NS: GOSUB @SUBTRACT_STACK
  R = N: GOSUB @SUBTRACT_STACK

  GOSUB @POP_R: SBP = R
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: NS = R
  GOSUB @POP_R: N = R
  GOSUB @POP_R: AY = R
  GOSUB @POP_R: AX = R
  GOSUB @POP_R: SY = R
  GOSUB @POP_R: SX = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: ANCHOR$ = R$
  GOSUB @POP_RS: CDS$ = R$

  ARGNUM = 2: GOSUB @LEAVE
  RT$ = "STRING"
  R$ = A$
  RETURN


@OMIT_CDS_CD0 '(SPG$:SARRAY):NONE
  R$ = "@OMIT_CDS_CD0": ARGNUM = 1: GOSUB @ENTER

  R$ = SPG$: GOSUB @PUSH_RS

  SPG$ = STACK$[BP + 1]
  R$ = SPG$: GOSUB @PUSH_RS
  GOSUB @POP_RR

  A = VAL(RR$[0])
  SPCLR A
  SPRITE$[A] = SUBST$(SPRITE$[A], 0, 1, "0")

  IF RN <= 7 THEN A = RN - 2 ELSE A = RN - 4
  A = VAL(RR$[A])
  SPCLR A
  SPRITE$[A] = SUBST$(SPRITE$[A], 0, 1, "0")

  GOSUB @POP_RS: SPG$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@RESTORE_CDS_CD0 '(SPG$:SARRAY):NONE
  R$ = "@RESTORE_CDS_CD0": ARGNUM = 1: GOSUB @ENTER

  R$ = SPG$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R

  SPG$ = STACK$[BP + 1]
  R$ = SPG$: GOSUB @PUSH_RS
  GOSUB @POP_RR

  I = VAL(RR$[0])
  IF RN <= 7 THEN A = RN - 2 ELSE A = RN - 4
  J = VAL(RR$[A])

  SPREAD(VAL(RR$[RN - 1])), X, Y

  SPRITE$[I] = SUBST$(SPRITE$[I], 0, 1, "1")
  SPRITE$[J] = SUBST$(SPRITE$[J], 0, 1, "1")

  R$ = SPRITE$[I]: GOSUB @PUSH_RS
  GOSUB @POP_RR
  A = VAL(RR$[SPR_W])
  R = VAL(RR$[SPR_H])
  IF ! ST_UREV THEN SPSET I, VAL(RR$[SPR_CHR]), 0, 0, 0, VAL(RR$[SPR_DEPTH]), A, R
  IF ST_UREV THEN SPSET I, VAL(RR$[SPR_CHR]), 0, 1, 1, VAL(RR$[SPR_DEPTH]), A, R
  IF ! ST_UREV THEN SPHOME I, VAL(RR$[SPR_HOME_X]), VAL(RR$[SPR_HOME_Y])
  IF ST_UREV THEN SPHOME I, A - VAL(RR$[SPR_HOME_X]) - 1, R - VAL(RR$[SPR_HOME_Y]) - 1
  SPOFS I, X, Y

  R$ = SPRITE$[J]: GOSUB @PUSH_RS
  GOSUB @POP_RR
  A = VAL(RR$[SPR_W])
  R = VAL(RR$[SPR_H])
  IF ! ST_UREV THEN SPSET J, VAL(RR$[SPR_CHR]), 0, 0, 0, VAL(RR$[SPR_DEPTH]), A, R
  IF ST_UREV THEN SPSET J, VAL(RR$[SPR_CHR]), 0, 1, 1, VAL(RR$[SPR_DEPTH]), A, R
  IF ! ST_UREV THEN SPHOME J, VAL(RR$[SPR_HOME_X]), VAL(RR$[SPR_HOME_Y])
  IF ST_UREV THEN SPHOME J, A - VAL(RR$[SPR_HOME_X]) - 1, R - VAL(RR$[SPR_HOME_Y]) - 1
  SPOFS J, X, Y

  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: SPG$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@SPG_OFS '(SPG$:SARRAY, X:NUMBER, Y:NUMBER, TM:NUMBER): NONE
  R$ = "@SPG_OFS": ARGNUM = 4: GOSUB @ENTER

  R$ = SPG$: GOSUB @PUSH_RS
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = TM: GOSUB @PUSH_R
  R = I: GOSUB @PUSH_R

  SPG$ = STACK$[BP + 1]
  X = VAL(STACK$[BP + 2])
  Y = VAL(STACK$[BP + 3])
  TM = VAL(STACK$[BP + 4])

  R$ = SPG$: GOSUB @PUSH_RS
  GOSUB @POP_RR

  FOR I = 0 TO RN - 1
    A = VAL(RR$[I])
    IF LEN(SPRITE$[A]) < 2 OR MID$(SPRITE$[A], 0, 1) != "0" THEN SPOFS A, X, Y, TM
  NEXT

  GOSUB @POP_R: I = R
  GOSUB @POP_R: TM = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_RS: SPG$ = R$

  ARGNUM = 4: GOSUB @LEAVE
  RETURN


@SPG_ANGLE_180 '(SPG$:SARRAY): NONE
  R$ = "@SPG_ANGLE_180": ARGNUM = 1: GOSUB @ENTER

  R$ = SPG$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = N: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1

  SPG$ = STACK$[BP + 1]
  R$ = SPG$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  N = RN
  R = N: GOSUB @ADD_STACK
  FOR I = 0 TO N - 1
    STACK$[RBP + I] = RR$[I]
  NEXT

  SPREAD(VAL(RR$[RN - 1])), X, Y
  FOR I = 0 TO N - 1
    J = VAL(STACK$[RBP + I])
    R$ = SPRITE$[J]: GOSUB @PUSH_RS
    GOSUB @POP_RR

    A = VAL(RR$[SPR_W])
    R = VAL(RR$[SPR_H])
    SPSET J, VAL(RR$[SPR_CHR]), 0, 1, 1, VAL(RR$[SPR_DEPTH]), A, R
    SPHOME J, A - VAL(RR$[SPR_HOME_X]) - 1, R - VAL(RR$[SPR_HOME_Y]) - 1
    SPOFS J, X, Y
  NEXT

  R = N: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: N = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: SPG$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@REINIT_SPG '(SPG$:STRING):NONE
  R$ = "@REINIT_SPG": ARGNUM = 1: GOSUB @ENTER

  R$ = SPG$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R
  R = N: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1

  SPG$ = STACK$[BP + 1]
  R$ = SPG$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  N = RN
  R = N: GOSUB @ADD_STACK
  FOR I = 0 TO N - 1
    STACK$[RBP + I] = RR$[I]
  NEXT

  FOR I = 0 TO N - 1
    J = VAL(STACK$[RBP + I])
    R$ = SPRITE$[J]: GOSUB @PUSH_RS
    GOSUB @POP_RR
    W = VAL(RR$[SPR_W])
    H = VAL(RR$[SPR_H])
    X = VAL(RR$[SPR_HOME_X])
    Y = VAL(RR$[SPR_HOME_Y])
    IF VAL(RR$[SPR_NOTCLR]) == 0 THEN SPCLR J: GOTO @_REINIT_SPG_1
    IF J > 31 THEN A = ST_UREV ELSE A = 0
    SPSET J,VAL(RR$[SPR_CHR]),VAL(RR$[SPR_PL]),A,A,VAL(RR$[SPR_DEPTH]),W,H
    IF J > 31 AND ST_UREV THEN X = W - X - 1: Y = H - Y - 1
    SPHOME J, X, Y
    IF J <= 31 AND ST_UREV THEN SPANGLE J, 180
    SPOFS J, -1024, -1024
@_REINIT_SPG_1
  NEXT

  R = N: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: N = R
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: SPG$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@FLOAT_SPG '(SPG$:STRING): NONE
  R$ = "@FLOAT_SPG": ARGNUM = 1: GOSUB @ENTER

  R$ = SPG$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = N: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1

  SPG$ = STACK$[BP + 1]

  R$ = SPG$: GOSUB @PUSH_RS
  GOSUB @POP_RR
  N = RN
  R = N: GOSUB @ADD_STACK
  FOR I = 0 TO N - 1
    STACK$[RBP + I] = RR$[I]
  NEXT

  SPREAD(VAL(STACK$[RBP + N - 1])), X, Y

  FOR I = 0 TO N - 1
    J = VAL(STACK$[RBP + I])
    R$ = SPRITE$[J]: GOSUB @PUSH_RS
    R = SPR_DEPTH: GOSUB @PUSH_R
    R$ = "2": GOSUB @PUSH_RS
    GOSUB @SET_NTH_SR
    SPRITE$[J] = R$
  NEXT

  R$ = SPG$: GOSUB @PUSH_RS
  GOSUB @REINIT_SPG

  R$ = SPG$: GOSUB @PUSH_RS
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = 0: GOSUB @PUSH_R
  GOSUB @SPG_OFS

  R = N: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: N = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: SPG$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@MAKE_CD_SPG '(CD$:STRING, SP1:NUMBER, SP2:NUMBER):SARRAY
  R$ = "@MAKE_CD_SPG": ARGNUM = 3: GOSUB @ENTER

  R$ = CD$: GOSUB @PUSH_RS
  R = SP1: GOSUB @PUSH_R
  R = SP2: GOSUB @PUSH_R

  CD$ = STACK$[BP + 1]
  SP1 = VAL(STACK$[BP + 2])
  SP2 = VAL(STACK$[BP + 3])

  R$ = CD$: GOSUB @PUSH_RS
  GOSUB @CARD_TO_ID_NUM
  R = SPU6_CDTL_S_OFS + (R - 22) * 4
  CHRREAD("SPU6", R), A$
  A$ = SUBST$(A$, 0, 1, "0")
  CHRSET "SPU6", R, A$
  R =  6 * 64 + R / 4
  SPSET SP1, R, 0, 0, 0, 2, 16, 8
  SPHOME SP1, 0, 0
  SPOFS SP1, -1024, -1024
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(R)
  RR$[SPR_PL] = "0"
  RR$[SPR_DEPTH] = "2"
  RR$[SPR_W] = "16"
  RR$[SPR_H] = "8"
  RR$[SPR_HOME_X] = "0"
  RR$[SPR_HOME_Y] = "0"
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[SP1] = R$

  R = 5 * 64 + SPU5_WHCD / 4
  SPSET SP2, R, 0, 0, 0, 2, 64, 64
  SPHOME SP2, 0, 0
  SPOFS SP2, -1024, -1024
  RR$[SPR_NOTCLR] = "1"
  RR$[SPR_CHR] = STR$(R)
  RR$[SPR_PL] = "0"
  RR$[SPR_DEPTH] = "2"
  RR$[SPR_W] = "64"
  RR$[SPR_H] = "64"
  RR$[SPR_HOME_X] = "0"
  RR$[SPR_HOME_Y] = "0"
  RN = SPR_N
  GOSUB @PUSH_RR
  GOSUB @POP_RS
  SPRITE$[SP2] = R$

  A$ = STR$(SP1) + "," + STR$(SP2)

  GOSUB @POP_R: SP2 = R
  GOSUB @POP_R: SP1 = R
  GOSUB @POP_RS: CD$ = R$

  ARGNUM = 3: GOSUB @LEAVE
  RT$ = "STRING"
  R$ = A$
  RETURN


@LOAD_BOARD '(NONE):NONE
  R$ = "@LOAD_BOARD": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = DX: GOSUB @PUSH_R
  R = DY: GOSUB @PUSH_R
  R = I8: GOSUB @PUSH_R
  R = I11: GOSUB @PUSH_R

  G_PAGE = 0: GPAGE 0, R_GPAGE, U_GPAGE
  I8 = -1
  I11 = -1
  FOR I = 0 TO 6 - 1
    A$ = CUR_BOARD$[I]
    IF MID$(A$, 0, 3) == "A08" THEN I11 = (MID$(A$, 3, 1) == "R")
    IF MID$(A$, 0, 3) == "A11" THEN I8 = (MID$(A$, 3, 1) == "R")
  NEXT

  W = CARD_WIDTH
  H = CARD_HEIGHT

  IF ! ST_UREV THEN A$ = GRP_FILE_A$ ELSE A$ = GRP_FILE_R$
  LOAD "GRP" + STR$(D_GPAGE) + ":" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR
  FOR I = 0 TO 6 - 1
    A$ = CUR_BOARD$[I]
    IF MID$(A$, 3, 1) == "R"  THEN @_LOAD_BOARD_1
    A = VAL(MID$(A$, 1, 2))
    IF A >= 13 THEN A = A - 2 ELSE A = A - 1
    R = GRP_R_BOARD + I
    X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    Y = (A % GRP_ROWS) * CARD_HEIGHT
    DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
    DY = (R % GRP_ROWS) * CARD_HEIGHT
    GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_BOARD_1
  NEXT

  IF I8 != 0 THEN @_LOAD_BOARD_11
  A = 8 - 1
  R = GRP_R_I8
  X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
  Y = (A % GRP_ROWS) * CARD_HEIGHT
  DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
  DY = (R % GRP_ROWS) * CARD_HEIGHT
  GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_BOARD_11
  IF I11 != 0 THEN @_LOAD_BOARD_12
  A = 11 - 1
  R = GRP_R_I11
  X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
  Y = (A % GRP_ROWS) * CARD_HEIGHT
  DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
  DY = (R % GRP_ROWS) * CARD_HEIGHT
  GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_BOARD_12

  IF ! ST_UREV THEN A$ = GRP_FILE_R$ ELSE A$ = GRP_FILE_A$
  LOAD "GRP" + STR$(D_GPAGE) + ":" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR
  FOR I = 0 TO 6 - 1
    A$ = CUR_BOARD$[I]
    IF MID$(A$, 3, 1) != "R"  THEN @_LOAD_BOARD_2
    A = VAL(MID$(A$, 1, 2))
    IF A >= 13 THEN A = A - 2 ELSE A = A - 1
    R = GRP_R_BOARD + I
    X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    Y = (A % GRP_ROWS) * CARD_HEIGHT
    DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
    DY = (R % GRP_ROWS) * CARD_HEIGHT
    GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_BOARD_2
  NEXT

  IF I8 != 1 THEN @_LOAD_BOARD_21
  A = 8 - 1
  R = GRP_R_I8
  X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
  Y = (A % GRP_ROWS) * CARD_HEIGHT
  DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
  DY = (R % GRP_ROWS) * CARD_HEIGHT
  GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_BOARD_21
  IF I11 != 1 THEN @_LOAD_BOARD_22
  A = 11 - 1
  R = GRP_R_I11
  X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
  Y = (A % GRP_ROWS) * CARD_HEIGHT
  DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
  DY = (R % GRP_ROWS) * CARD_HEIGHT
  GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_BOARD_22

  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE

  GOSUB @POP_R: I11 = R
  GOSUB @POP_R: I8 = R
  GOSUB @POP_R: DY = R
  GOSUB @POP_R: DX = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@LOAD_FST_CD '(NONE):NONE
  R$ = "@LOAD_FST_CD": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = DX: GOSUB @PUSH_R
  R = DY: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1
  R = 9: GOSUB @ADD_STACK

  G_PAGE = 0: GPAGE 0, R_GPAGE, U_GPAGE
  FOR I = 0 TO 8 - 1
    STACK$[RBP + I] = ""
    IF CUR_CARDS$[I] != "" THEN STACK$[RBP + I] = MID$(CUR_CARDS$[I], 0, 3)
  NEXT
  STACK$[RBP + 8] = ""
  IF CUR_TALON$ != "" THEN STACK$[RBP + 8] = MID$(CUR_TALON$, 0, 3)

  W = CARD_WIDTH
  H = CARD_HEIGHT

  IF ! ST_UREV THEN A$ = GRP_FILE_S$ ELSE A$ = GRP_FILE_RS$
  LOAD "GRP" + STR$(D_GPAGE) + ":" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR
  FOR I = 0 TO 9 - 1
    A$ = STACK$[RBP + I]
    IF A$ == "" OR MID$(A$, 0, 1) != "S" THEN @_LOAD_FST_CD_NS
    A = VAL(MID$(A$, 1, 2)) - 1
    R = GRP_R_FST_CD + I
    X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    Y = (A % GRP_ROWS) * CARD_HEIGHT
    DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
    DY = (R % GRP_ROWS) * CARD_HEIGHT
    GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_FST_CD_NS
  NEXT

  IF ! ST_UREV THEN A$ = GRP_FILE_D$ ELSE A$ = GRP_FILE_RD$
  LOAD "GRP" + STR$(D_GPAGE) + ":" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR
  FOR I = 0 TO 9 - 1
    A$ = STACK$[RBP + I]
    IF A$ == "A00" THEN A = GRP_D_A00: GOTO @_LOAD_FST_CD_D
    IF A$ == "A13" THEN A = GRP_D_A13: GOTO @_LOAD_FST_CD_D
    IF A$ == ""  OR MID$(A$, 0, 1) != "D" THEN @_LOAD_FST_CD_ND
    A = VAL(MID$(A$, 1, 2)) - 1
@_LOAD_FST_CD_D
    R = GRP_R_FST_CD + I
    X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    Y = (A % GRP_ROWS) * CARD_HEIGHT
    DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
    DY = (R % GRP_ROWS) * CARD_HEIGHT
    GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_FST_CD_ND
  NEXT

  IF ! ST_UREV THEN A$ = GRP_FILE_H$ ELSE A$ = GRP_FILE_RH$
  LOAD "GRP" + STR$(D_GPAGE) + ":" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR
  FOR I = 0 TO 9 - 1
    A$ = STACK$[RBP + I]
    IF A$ == ""  OR MID$(A$, 0, 1) != "H" THEN @_LOAD_FST_CD_NH
    A = VAL(MID$(A$, 1, 2)) - 1
    R = GRP_R_FST_CD + I
    X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    Y = (A % GRP_ROWS) * CARD_HEIGHT
    DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
    DY = (R % GRP_ROWS) * CARD_HEIGHT
    GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_FST_CD_NH
  NEXT

  IF ! ST_UREV THEN A$ = GRP_FILE_C$ ELSE A$ = GRP_FILE_RC$
  LOAD "GRP" + STR$(D_GPAGE) + ":" + A$, FALSE
  IF RESULT != TRUE THEN @LOAD_ERROR
  FOR I = 0 TO 9 - 1
    A$ = STACK$[RBP + I]
    IF A$ == ""  OR MID$(A$, 0, 1) != "C" THEN @_LOAD_FST_CD_NC
    A = VAL(MID$(A$, 1, 2)) - 1
    R = GRP_R_FST_CD + I
    X = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    Y = (A % GRP_ROWS) * CARD_HEIGHT
    DX = FLOOR(R / GRP_ROWS) * CARD_WIDTH
    DY = (R % GRP_ROWS) * CARD_HEIGHT
    GCOPY D_GPAGE, X, Y, X + W - 1, Y + H - 1, DX, DY, FALSE 
@_LOAD_FST_CD_NC
  NEXT

  G_PAGE = 0: GPAGE 0, D_GPAGE, U_GPAGE

  R = 9: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: DY = R
  GOSUB @POP_R: DX = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


'Returning CHR_R is fixed to 64x64 (RN == 8 * 8).
@GSPOIT_CHR_R '(X:NUMBER, Y:NUMBER, W:NUMBER, H:NUMBER, PL$:LABEL): ARRAY
  R$ = "@GSPOIT_CHR_R": ARGNUM = 5: GOSUB @ENTER

  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R
  R$ = PL$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = K: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1
  R = 256: GOSUB @ADD_STACK
  FOR I = 0 TO 256 - 1
   STACK$[RBP + I] = "0"
  NEXT

  X = VAL(STACK$[BP + 1])
  Y = VAL(STACK$[BP + 2])
  W = VAL(STACK$[BP + 3])
  H = VAL(STACK$[BP + 4])
  PL$ = STACK$[BP + 5]

  RESTORE PL$
  FOR I = 0 TO 16 - 1
    READ A$
    IF A$ == "" THEN @_GSPOIT_CHR_P1
    J = 0
@_GSPOIT_CHR_P0
    IF CMAP$[J] == A$ THEN STACK$[RBP + J] = HEX$(I, 1): GOTO @_GSPOIT_CHR_P1
    J = J + 1
    IF J < 256 GOTO @_GSPOIT_CHR_P0
@_GSPOIT_CHR_P1
  NEXT

  FOR J = 0 TO H - 1
    A$ = ""
    FOR I = 0 TO W - 1
      A$ = A$ + STACK$[RBP + GSPOIT(X + I, Y + J)]
    NEXT
    TMP$[J, 0] = A$
  NEXT

  FOR I = 0 TO (8 * 8) - 1
    RR$[I] = ""
  NEXT

  FOR J = 0 TO 8 - 1
    FOR I = 0 TO 8 - 1
      A$ = ""
      FOR K = 0 TO 8 - 1
        IF (J * 8 + K >= H) OR (I * 8 >= W) THEN A$ = A$ + "0" * 8: GOTO @_GSPOIT_CHR_1
	A = 8
	IF I * 8 + 8 > W THEN A = I * 8 + 8 - W
	A$ = A$ + MID$(TMP$[J * 8 + K, 0], I * 8, A) + "0" * (8 - A)
@_GSPOIT_CHR_1
      NEXT
      RR$[J * 8 + I] = A$
    NEXT
  NEXT
  RN = 8 * 8

  R = 256: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: K = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: PL$ = R$
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R

  ARGNUM = 5: GOSUB @LEAVE
  RT$ = "ARRAY"
  RETURN


@LBG1_CLR '(NONE): NONE
  R$ = "@LBG1_CLR": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R

  FOR J = 0 TO LBG1_CH - 1
    FOR I = 0 TO LBG1_CW - 1
      BGPUT 1, LBG1_CX + I, LBG1_CY + J, 0, 0, 0, 0
    NEXT
  NEXT
  BGOFS 1, 0, 0

  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@LBG1_B00 '(NONE): NONE
  R$ = "@LBG1_B00": ARGNUM = 0: GOSUB @ENTER

  FOR R = 0 TO CARD_CH - 1
    FOR A = 0 TO CARD_CW - 1
      BGPUT 1, TALON_CX + A, LBG1_CY + R, 256 + BGU1_B00 + R * CARD_CW + A, BGPL_B00, 0, 0
   NEXT
  NEXT

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@LBG1_DISCARDED '(CDS$:STRING): NONE
  R$ = "@LBG1_DISCARDED": ARGNUM = 1: GOSUB @ENTER

  R$ = CDS$: GOSUB @PUSH_RS
  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R

  CDS$ = STACK$[BP + 1]

  IF CDS$ == "" THEN @_LBG1_DSC_E
  IF LEN(CDS$) > 3 THEN @_LBG1_DSC_2
  FOR J = 0 TO CARD_CH - 1
    FOR I = 0 TO CARD_CW - 1
      A = BGU1_WHCD_C
      IF I == 0 AND J == 0 THEN A = BGU1_WHCD_TL: GOTO @_LBG1_DSC_1
      IF I == CARD_CW - 1 AND J == 0 THEN A = BGU1_WHCD_TR: GOTO @_LBG1_DSC_1
      IF I == CARD_CW - 1 AND J == CARD_CH - 1 THEN A = BGU1_WHCD_BR: GOTO @_LBG1_DSC_1
      IF I == 0 AND J == CARD_CH - 1 THEN A = BGU1_WHCD_BL: GOTO @_LBG1_DSC_1
      IF I == 0 THEN A = BGU1_WHCD_L: GOTO @_LBG1_DSC_1
      IF J == 0 THEN A = BGU1_WHCD_T: GOTO @_LBG1_DSC_1
      IF I == CARD_CW - 1 THEN A = BGU1_WHCD_R: GOTO @_LBG1_DSC_1
      IF J == CARD_CH - 1  THEN A = BGU1_WHCD_B: GOTO @_LBG1_DSC_1
@_LBG1_DSC_1
      BGPUT 1, DISCARDED_CX + 1 + I, LBG1_CY + J, 256 + A, 0, 0, 0
   NEXT
  NEXT
  GOTO @_LBG1_DSC_E

@_LBG1_DSC_2
  FOR I = 0 TO DISCARDED_CH - 1
    FOR J = 0 TO DISCARDED_CW - 1
      A = 256 + BGU1_DISCARDED + J * DISCARDED_CW + I
      BGPUT 1, DISCARDED_CX + I, LBG1_CY + J, A, BGPL_DISCARDED, 0, 0
   NEXT
  NEXT
@_LBG1_DSC_E

  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R
  GOSUB @POP_RS: CDS$ = R$

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@DISPLAY_TLN_NUM '(NONE):NONE
  R$ = "@DISPLAY_TLN_NUM": ARGNUM = 0: GOSUB @ENTER

  A$ = STR$(FLOOR((LEN(CUR_TALON$) + 1) / 4))
  A$ = "\c0" + " " * (2 - LEN(A$)) + A$
  R = 1: GOSUB @PUSH_R
  R = TALON_NUM_CX: GOSUB @PUSH_R
  R = TALON_NUM_CY: GOSUB @PUSH_R
  R$ = A$: GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@OMIT_TLN_NUM '(NONE):NONE
  R$ = "@OMIT_TLN_NUM": ARGNUM = 0: GOSUB @ENTER

  R = 1: GOSUB @PUSH_R
  R = TALON_NUM_CX: GOSUB @PUSH_R
  R = TALON_NUM_CY: GOSUB @PUSH_R
  R$ = "  ": GOSUB @PUSH_RS
  R$ = "": GOSUB @PUSH_RS
  GOSUB @CON_PRINT

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_BOARD '(NONE): NONE
  R$ = "@DRAW_BOARD": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R
  R = SX: GOSUB @PUSH_R
  R = SY: GOSUB @PUSH_R

  W = CARD_WIDTH
  H = CARD_HEIGHT
  FOR I = 0 TO 6 - 1
    A$ = CUR_BOARD$[I]
    X = CARD_X[I]
    Y = CARD_Y[I]
    IF ST_UREV THEN X = GRP_WIDTH - X - W: Y = GRP_HEIGHT - Y - H
    A = GRP_R_BOARD + I
    SX = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    SY = (A % GRP_ROWS) * CARD_HEIGHT
    GCOPY R_GPAGE, SX, SY, SX + W - 1, SY + H - 1, X, Y, FALSE
  NEXT

  GOSUB @POP_R: SY = R
  GOSUB @POP_R: SX = R
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_FST_CD '(NONE): NONE
  R$ = "@DRAW_FST_CD": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R
  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R
  R = W: GOSUB @PUSH_R
  R = H: GOSUB @PUSH_R
  R = SX: GOSUB @PUSH_R
  R = SY: GOSUB @PUSH_R
  R = RBP: GOSUB @PUSH_R
  RBP = SP + 1
  R = 8: GOSUB @ADD_STACK

  FOR I = 0 TO 8 - 1
    A$ = CUR_CARDS$[I]
    STACK$[RBP + I] = ""
    IF A$ != "" THEN STACK$[RBP + I] = MID$(A$, 0, 3)
  NEXT

  W = CARD_WIDTH
  H = CARD_HEIGHT
  FOR I = 0 TO 8 - 1
    J = BOARD_ORDER[I]
    A$ = STACK$[RBP + J]
    IF A$ == "" THEN @_DRAW_FST_CD_1
    R = 0: GOSUB @PUSH_R
    R$ = CUR_CARDS$[J]: GOSUB @PUSH_RS
    R$ = CARDS_ANCHOR$[J]: GOSUB @PUSH_RS
    GOSUB @NTH_CD_XY
    X = CARDS_X[J] + VAL(RR$[0])
    Y = CARDS_Y[J] + VAL(RR$[1])
    IF ST_UREV THEN X = GRP_WIDTH - X - W: Y = GRP_HEIGHT - Y - H
    A = GRP_R_FST_CD + J
    SX = FLOOR(A / GRP_ROWS) * CARD_WIDTH
    SY = (A % GRP_ROWS) * CARD_HEIGHT
    GCOPY R_GPAGE, SX, SY, SX + W - 1, SY + H - 1, X, Y, FALSE
    A$ = CUR_CARDS$[J]
    IF LEN(A$) <= 3 THEN @_DRAW_FST_CD_1
    X = CARDS_X[J] + VAL(RR$[0])
    Y = CARDS_Y[J] + VAL(RR$[1])
    IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
    GPSET X, Y, COL_GREY
    IF ((LEN(A$) + 1) / 4) % 5 == 1 THEN @_DRAW_FST_CD_2
    X = CARDS_X[J] + VAL(RR$[0])
    Y = CARDS_Y[J] + VAL(RR$[1]) + H - 1
    IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
    GPSET X, Y, COL_GREY
@_DRAW_FST_CD_2
    IF LEN(A$) <= 4 * 5 THEN @_DRAW_FST_CD_1
    X = CARDS_X[J] + VAL(RR$[0]) + W - 1
    Y = CARDS_Y[J] + VAL(RR$[1])
    IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
    GPSET X, Y, COL_GREY
@_DRAW_FST_CD_1
  NEXT

  R = 8: GOSUB @SUBTRACT_STACK
  GOSUB @POP_R: RBP = R
  GOSUB @POP_R: SY = R
  GOSUB @POP_R: SX = R
  GOSUB @POP_R: H = R
  GOSUB @POP_R: W = R
  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R
  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_PURPOSE '(NONE): NONE
  R$ = "@DRAW_PURPOSE": ARGNUM = 0: GOSUB @ENTER

  R = X: GOSUB @PUSH_R
  R = Y: GOSUB @PUSH_R

  IF CUR_PURPOSE$ == "" OR LEN(CUR_PURPOSE$) > 3 THEN @_DRAW_PURPOSE_2
  IF CUR_PURPOSE$ == "A00" THEN R = SP_A00 ELSE R = SP_A13
  IF CUR_PURPOSE_DEG == 90 THEN @_DRAW_PURPOSE_90
  IF CUR_PURPOSE_DEG == 270 THEN @_DRAW_PURPOSE_27
  IF ! ST_UREV THEN A = 0 ELSE A =  180
  SPANGLE R, A
  X = 2
  Y = CARDS_CENTER_Y - CARD_HH - 8
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS R, X, Y
  GOTO @_DRAW_PURPOSE_E

@_DRAW_PURPOSE_90
  IF ! ST_UREV THEN A = 90 ELSE A =  270
  SPANGLE R, A
  X = 2 + CARD_HEIGHT
  Y = CARDS_CENTER_Y - CARD_HW - 12
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS R, X, Y
  GOTO @_DRAW_PURPOSE_E

@_DRAW_PURPOSE_27
  IF ! ST_UREV THEN A = 270 ELSE A =  90
  SPANGLE R, A
  X = 2
  Y = CARDS_CENTER_Y + CARD_HW - 12
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS R, X, Y
  GOTO @_DRAW_PURPOSE_E

@_DRAW_PURPOSE_2
  IF ! ST_UREV THEN A = 0 ELSE A =  180
  X = 2
  Y = CARDS_CENTER_Y - CARD_HH - 8
  SPANGLE SP_A00, A
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS SP_A00, X, Y
  X = 2 + 8
  Y = CARDS_CENTER_Y - CARD_HH - 8
  SPANGLE SP_A13, A
  IF ST_UREV THEN X = GRP_WIDTH - X - 1: Y = GRP_HEIGHT - Y - 1
  SPOFS SP_A13, X, Y
@_DRAW_PURPOSE_E

  GOSUB @POP_R: Y = R
  GOSUB @POP_R: X = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


@DRAW_TOKEN '(TM:NUMBER): NONE
  R$ = "@DRAW_TOKEN": ARGNUM = 1: GOSUB @ENTER

  R = TM: GOSUB @PUSH_R

  TM = VAL(STACK$[BP + 1])

  A = CARD_X[CUR_TOKEN] + CARD_HW
  R = CARD_Y[CUR_TOKEN] + CARD_HH

  IF ST_UREV THEN A = GRP_WIDTH - A - 1: R = GRP_HEIGHT - R - 1
  SPOFS SP_TOKEN, A, R, TM

  GOSUB @POP_R: TM = R

  ARGNUM = 1: GOSUB @LEAVE
  RETURN


@REDRAW_CDS '(NONE):NONE
  R$ = "@REDRAW_CDS": ARGNUM = 0: GOSUB @ENTER

  R = I: GOSUB @PUSH_R
  R = J: GOSUB @PUSH_R

  FOR J = 8 - 1 TO 0 STEP -1
    I = BOARD_ORDER[J]
    IF CUR_SPG$[I] == "" THEN @_REDRAW_CDS_1
    R$ = CUR_SPG$[I]: GOSUB @PUSH_RS
    GOSUB @SPRITE_FREE
    CUR_SPG$[I] = ""
@_REDRAW_CDS_1
  NEXT

  FOR J = 0 TO 8 - 1
    I = BOARD_ORDER[J]
    IF CUR_CARDS$[I] == "" THEN @_REDRAW_CDS_2
    R$ = CUR_CARDS$[I]: GOSUB @PUSH_RS
    R$ = CARDS_ANCHOR$[I]: GOSUB @PUSH_RS
    GOSUB @MAKE_CDS_SPG
    CUR_SPG$[I] = R$
    IF ST_UREV THEN R$ = CUR_SPG$[I]: GOSUB @PUSH_RS: GOSUB @SPG_ANGLE_180
    R$ = CUR_SPG$[I]: GOSUB @PUSH_RS
    GOSUB @OMIT_CDS_CD0
    R$ = CUR_SPG$[I]: GOSUB @PUSH_RS
    R = CARDS_X[I]: A = CARDS_Y[I]
    IF ST_UREV THEN R = GRP_WIDTH - R - 1: A = GRP_HEIGHT - A - 1
    R = R: GOSUB @PUSH_R
    R = A: GOSUB @PUSH_R
    R = 0: GOSUB @PUSH_R
    GOSUB @SPG_OFS
@_REDRAW_CDS_2
  NEXT

  GOSUB @POP_R: J = R
  GOSUB @POP_R: I = R

  ARGNUM = 0: GOSUB @LEAVE
  RETURN


'== END YOUSCOUT ==
